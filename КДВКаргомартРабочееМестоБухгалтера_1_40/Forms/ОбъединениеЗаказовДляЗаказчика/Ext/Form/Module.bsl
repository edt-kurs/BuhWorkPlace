
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МакетСКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ВспЗапросПараметрыПодбораЗаказовКОбъединениюВРТУ");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетСКД, УникальныйИдентификатор);
	
	ИсточникДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	КомпоновщикНастроек.Инициализировать(ИсточникДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	
	Если НЕ (ЗначениеЗаполнено(Параметры.КДВКаргомартЗаказ) И ЗначениеЗаполнено(Параметры.Организация)) Тогда
		
		//Ругань о незаполненных параметрах
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Объект.Организация 		= Параметры.Организация;
	КДВКаргомартЗаказ 	= Параметры.КДВКаргомартЗаказ;
	
	Отказ = НЕ ЗаполнитьТаблицуДокументовЗаказчика();
	
КонецПроцедуры

//КВВ++
&НаСервере
Функция ЗаполнитьТаблицуДокументовЗаказчика()
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ
	|	КДВКаргомартЗаказ.ДатаПогрузки КАК ДатаПогрузки,
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику.ДоговорКонтрагента КАК ДокументРеализацииЗаказчикуДоговорКонтрагента,
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику.Контрагент КАК ДокументРеализацииЗаказчикуКонтрагент,
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику.Проведен КАК ДокументРеализацииЗаказчикуПроведен,
	|	ЗаказыВТекущемРТУ.Ссылка КАК ЗаказВТекущемРТУ,
	|	ЗаказыВТекущемРТУ.ДокументРеализацииЗаказчику КАК ДокументРеализацииЗаказчику,
	|	ЗаказыВТекущемРТУ.ЗаказчикСуммаБезНДС + ЗаказыВТекущемРТУ.ЗаказчикСуммаНДС КАК Выручка
	|ИЗ
	|	Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КДВКаргомартЗаказ КАК ЗаказыВТекущемРТУ
	|		ПО КДВКаргомартЗаказ.ДокументРеализацииЗаказчику = ЗаказыВТекущемРТУ.ДокументРеализацииЗаказчику
	|ГДЕ
	|	КДВКаргомартЗаказ.Ссылка = &КДВКаргомартЗаказ
	|	И КДВКаргомартЗаказ.Организация = &Организация
	|ИТОГИ
	|	МАКСИМУМ(ДатаПогрузки),
	|	МАКСИМУМ(ДокументРеализацииЗаказчикуДоговорКонтрагента),
	|	МАКСИМУМ(ДокументРеализацииЗаказчикуКонтрагент),
	|	МАКСИМУМ(ДокументРеализацииЗаказчикуПроведен),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказВТекущемРТУ),
	|	СУММА(Выручка)
	|ПО
	|	ДокументРеализацииЗаказчику";
	Запрос.УстановитьПараметр("Организация", 			Объект.Организация);
	Запрос.УстановитьПараметр("КДВКаргомартЗаказ", КДВКаргомартЗаказ);
	ДанныеТекущегоЗаказа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ДанныеТекущегоЗаказа.Следующий() = Ложь Тогда
		
		Сообщить("Не найден заказ Каргомарт №" + КДВКаргомартЗаказ);
		Возврат Ложь;
		
	КонецЕсли;
	
	ВыборкаЗаказыВТекущемРТУ = ДанныеТекущегоЗаказа.Выбрать();
	ЗаказыВТекущемРТУ.Очистить();
	МассивЗаказыВТекущемРТУ = Новый Массив;
	
	Пока ВыборкаЗаказыВТекущемРТУ.Следующий() Цикл
		
		ЗаказыВТекущемРТУ.Добавить(ВыборкаЗаказыВТекущемРТУ.Выручка, ВыборкаЗаказыВТекущемРТУ.ЗаказВТекущемРТУ);
		МассивЗаказыВТекущемРТУ.Добавить(ВыборкаЗаказыВТекущемРТУ.ЗаказВТекущемРТУ);
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ОтборПериод.ДатаНачала) Тогда
		
		ОтборПериод.ДатаНачала 		= НачалоМесяца(ДобавитьМесяц(ДанныеТекущегоЗаказа.ДатаПогрузки, -1));
		ОтборПериод.ДатаОкончания 	= КонецМесяца(ТекущаяДата());
		
	КонецЕсли;
	
	//Здесь мы можем установить параметры для СКД
	ПараметрыКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ПараметрыКомпоновки.Найти("НачалоПериода").Значение 				= ОтборПериод.ДатаНачала;
	ПараметрыКомпоновки.Найти("НачалоПериода").Использование 			= Истина;
	ПараметрыКомпоновки.Найти("КонецПериода").Значение 					= ОтборПериод.ДатаОкончания;
	ПараметрыКомпоновки.Найти("КонецПериода").Использование 			= Истина;
	ПараметрыКомпоновки.Найти("МассивЗаказыВТекущемРТУ").Значение 		= МассивЗаказыВТекущемРТУ;
	ПараметрыКомпоновки.Найти("МассивЗаказыВТекущемРТУ").Использование 	= Истина;
	ПараметрыКомпоновки.Найти("Организация").Значение 					= Объект.Организация;
	ПараметрыКомпоновки.Найти("Организация").Использование 				= Истина;
	
	
	//Получаем макет СКД
	МакетСКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ВспЗапросПараметрыПодбораЗаказовКОбъединениюВРТУ");
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ИспользуетсяОтборГруз 				= Ложь;
	ГрузСравнение 						= Неопределено;
	ГрузПравоеЗначение 					= Неопределено;
	ИспользуетсяОтборГрузоПолучатель 	= Ложь;
	ГрузополучательСравнение 			= Неопределено;
	ГрузополучательПравоеЗначение 		= Неопределено;
	
	Для Каждого ЭлементОтбора Из НастройкиКомпоновки.Отбор.Элементы Цикл
		
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Груз" И ЭлементОтбора.Использование = Истина Тогда
			
			ИспользуетсяОтборГруз 				= Истина;
			ГрузСравнение 						= ЭлементОтбора.ВидСравнения;
			ГрузПравоеЗначение 					= ЭлементОтбора.ПравоеЗначение;
			ЭлементОтбора.Использование 		= Ложь;
			
		КонецЕсли;
		
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Грузополучатель" И ЭлементОтбора.Использование = Истина Тогда
			
			ИспользуетсяОтборГрузоПолучатель 	= Истина;
			ГрузополучательСравнение 			= ЭлементОтбора.ВидСравнения;
			ГрузополучательПравоеЗначение 		= ЭлементОтбора.ПравоеЗначение;
			ЭлементОтбора.Использование 		= Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//Тип ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений - ключевой для вывода в ТЗ, а не табличный документ
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетСКД, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	//ТЗВывода - таблица, в которую будут выводиться данные.
	ТЗВывода = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗВывода);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ТаблицаДокументовЗаказчика.Очистить();
	
	Итр = 0;
	
	Пока Итр < ТЗВывода.Количество() Цикл
		
		СтрокаВыборки = ТЗВывода[Итр];
		
		Итр2 = Итр;
		
		ЗаказыКаргомарт = "";
		Грузополучатель = "";
		Груз 			= "";
		
		Пока Итр2 < ТЗВывода.Количество() И ТЗВывода[Итр2].РТУ = СтрокаВыборки.РТУ Цикл
			
			Если ЗначениеЗаполнено(Грузополучатель) = Ложь Тогда
				
				ДетальнаяИнформация = КДВКаргомартКлиентСервер.ЗначениеИзJSON(ТЗВывода[Итр2].ДетальнаяИнформация);
				ДопСведения 		= КДВКаргомартКлиентСервер.ПолучитьДополнительныеСведенияИзДетальнойИнформации_v2(ДетальнаяИнформация);
				Грузополучатель 	= ДопСведения.ГрузоПолучатель;
				Груз 				= ДопСведения.ОписаниеГруза;
		
			КонецЕсли;
			
			ЗаказыКаргомарт = ЗаказыКаргомарт + ?(ЗаказыКаргомарт = "", "", Символы.ПС) + ТЗВывода[Итр2].НомерЗаказа;
			
			Итр2 = Итр2 + 1;
			
		КонецЦикла;
		
		Итр = Итр2;
		
		Если 	(НЕ ИспользуетсяОтборГруз ИЛИ ЗначениеСоответствуетОтбору(Груз, ГрузСравнение, ГрузПравоеЗначение))
			И 	(НЕ ИспользуетсяОтборГрузоПолучатель ИЛИ ЗначениеСоответствуетОтбору(Грузополучатель, ГрузополучательСравнение, ГрузополучательПравоеЗначение)) Тогда
			
			НСтрока = ТаблицаДокументовЗаказчика.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока, СтрокаВыборки);
			НСтрока.Груз = Груз;
			НСтрока.Грузополучатель = Грузополучатель;
			НСтрока.ЗаказыКаргомарт = ЗаказыКаргомарт;
			
		КонецЕсли;
		
		
		
		//ЗаказыКаргомарт = "";
		//Грузополучатель = "";
		//ОписаниеГруза 	= "";
		//
		//Пока ВыборкаЗаказы.Следующий() Цикл
		//	ЗаказыКаргомарт = ЗаказыКаргомарт + ?(ЗаказыКаргомарт = "", "", Символы.ПС) + ВыборкаЗаказы.КДВКаргомартЗаказ;
		//	
		//	Если ЗначениеЗаполнено(Грузополучатель) = Ложь Тогда
		//		
		//		ДетальнаяИнформация 		= КДВКаргомартКлиентСервер.ЗначениеИзJSON(ВыборкаЗаказы.ДетальнаяИнформация);
		//		ДопСведения 				= КДВКаргомартКлиентСервер.ПолучитьДополнительныеСведенияИзДетальнойИнформации_v2(ДетальнаяИнформация);
		//		Грузополучатель 			= ?(ЗначениеЗаполнено(ДопСведения.ГрузоПолучатель), ДопСведения.ГрузоПолучатель, ВыборкаЗаказы.Заказчик);
		//		ОписаниеГруза 				= ДопСведения.ОписаниеГруза;
		//		
		//	КонецЕсли;
		//	
		//КонецЦикла;
		//
		//Если ЗначениеЗаполнено(ОтборГруз) И СтрНайти(ОписаниеГруза, ОтборГруз) = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(ОтборГрузополучатель) И СтрНайти(Грузополучатель, ОтборГрузополучатель) = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		//СтрокаТаб 		= ТаблицаДокументовЗаказчика.Добавить();
		//ЗаполнитьЗначенияСвойств(СтрокаТаб, Выборка);
		//
		//СтрокаТаб.ЗаказыКаргомарт 	= ЗаказыКаргомарт;
		//СтрокаТаб.Грузополучатель 	= Грузополучатель;
		//СтрокаТаб.ОписаниеГруза 	= ОписаниеГруза;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


&НаСервере
Функция ЗначениеСоответствуетОтбору(ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат ЛевоеЗначение = ПравоеЗначение;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат ЛевоеЗначение > ПравоеЗначение;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ЛевоеЗначение >= ПравоеЗначение;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		
		Результат = Ложь;
		
		Попытка
			Результат = ЛевоеЗначение.ПринадлежитЭлементу(ПравоеЗначение);
		Исключение
		КонецПопытки;
		
		Возврат Результат;
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		
		Результат = Ложь;
		
		Попытка
			Результат = НЕ ПравоеЗначение.НайтиПоЗначению(ЛевоеЗначение) = Неопределено;
		Исключение
		КонецПопытки;
		
		Возврат Результат;
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		
		Результат = Ложь;
		
		Попытка
			Для Каждого Элемент Из ПравоеЗначение Цикл
				Если ЛевоеЗначение.ПринадлежитЭлементу(ПравоеЗначение) Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
		
		Возврат Результат;
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Возврат ЗначениеЗаполнено(ЛевоеЗначение);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат ЛевоеЗначение < ПравоеЗначение;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат ЛевоеЗначение <= ПравоеЗначение;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		
		Результат = Ложь;
		
		Попытка
			Результат =  Лев(ЛевоеЗначение, СтрДлина(ПравоеЗначение)) = ПравоеЗначение;
		Исключение
		КонецПопытки;
		
		Возврат Результат;
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат НЕ ЗначениеСоответствуетОтбору(ЛевоеЗначение, ВидСравненияКомпоновкиДанных.ВИерархии, ПравоеЗначение);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат НЕ ЗначениеСоответствуетОтбору(ЛевоеЗначение, ВидСравненияКомпоновкиДанных.ВСписке, ПравоеЗначение);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат НЕ ЗначениеСоответствуетОтбору(ЛевоеЗначение, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ПравоеЗначение);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Возврат НЕ ЗначениеСоответствуетОтбору(ЛевоеЗначение, ВидСравненияКомпоновкиДанных.Заполнено, ПравоеЗначение);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		Возврат НЕ ЗначениеСоответствуетОтбору(ЛевоеЗначение, ВидСравненияКомпоновкиДанных.НачинаетсяС, ПравоеЗначение);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		Возврат НЕ ЗначениеСоответствуетОтбору(ЛевоеЗначение, ВидСравненияКомпоновкиДанных.Подобно, ПравоеЗначение);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат НЕ ЛевоеЗначение = ПравоеЗначение;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат НЕ ЗначениеСоответствуетОтбору(ЛевоеЗначение, ВидСравненияКомпоновкиДанных.Содержит, ПравоеЗначение);
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно ИЛИ ВидСравненияКомпоновкиДанных.Содержит Тогда
		
		Результат = Ложь;
		
		Попытка
			Результат =  СтрНайти(ЛевоеЗначение,ПравоеЗначение) > 0;
		Исключение
		КонецПопытки;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВыполнитьОбъединениеНаСервере()
	
	МассивЗаказовКаргомарт = Новый Массив;
	
	Для Каждого ЗаказВТекущемРТУ из ЗаказыВТекущемРТУ Цикл
		Если МассивЗаказовКаргомарт.Найти(ЗаказВТекущемРТУ.Представление) = Неопределено Тогда
			МассивЗаказовКаргомарт.Добавить(ЗаказВТекущемРТУ.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Отбор 			= Новый Структура;
	Отбор.Вставить("Выбран", Истина);
	ВыбранныеСтроки = ТаблицаДокументовЗаказчика.НайтиСтроки(Отбор);
	
	Для Каждого ВыбраннаяСтрока из ВыбранныеСтроки Цикл
		
		ЗаказыВыбраннойСтроки = СтрРазделить(ВыбраннаяСтрока.ЗаказыКаргомарт, Символы.ПС, Ложь);
		
		Для Каждого ЗаказВыбраннойСтроки из ЗаказыВыбраннойСтроки Цикл
			Если МассивЗаказовКаргомарт.Найти(ЗаказВыбраннойСтроки) = Неопределено Тогда
				МассивЗаказовКаргомарт.Добавить(ЗаказВыбраннойСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если МассивЗаказовКаргомарт.Количество() > 1 Тогда
		
		Возврат КДВКаргомартСервер.СоздатьРеализациюЗаказчикуПоЗаказамКаргомарт(Объект.Организация, МассивЗаказовКаргомарт, ТекущаяДата());
			
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("КодОшибки", 0);
		Результат.Вставить("Лог", "Объединение не требуется.");
		Возврат Результат;
		
	КонецЕсли;
	
	
КонецФункции

&НаСервере
Процедура КНайтиНаСервере()
	
	ЗаполнитьТаблицуДокументовЗаказчика();
	ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаДокументовЗаказчика;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛюбойКонтрагентПриИзменении(Элемент)
	
	Если ЛюбойКонтрагент = Истина Тогда
		ЛюбойДоговор = Истина;
	КонецЕсли;
	
	ЗаполнитьТаблицуДокументовЗаказчика();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛюбойДоговорПриИзменении(Элемент)
	
	Если ЛюбойДоговор = Ложь Тогда
		ЛюбойКонтрагент = Ложь;
	КонецЕсли;
	
	ЗаполнитьТаблицуДокументовЗаказчика();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеРезультирующегоРТУ()
	
	ОписаниеРезультирующегоРТУ = "Результирующий документ будет включать ";
	
	Отбор = Новый Структура;
	Отбор.Вставить("Выбран", Истина);
	ВыбранныеСтроки = ТаблицаДокументовЗаказчика.НайтиСтроки(Отбор);
	
	Если ЗаказыВТекущемРТУ.Количество() > 1 Или ВыбранныеСтроки.Количество() > 0 Тогда
		ОписаниеРезультирующегоРТУ = ОписаниеРезультирующегоРТУ + "заказы Каргомарт ";
	Иначе
		ОписаниеРезультирующегоРТУ = ОписаниеРезультирующегоРТУ + "заказ Каргомарт ";
	КонецЕсли;
	
	ОбщаяСумма = 0;
	
	Для Каждого ЗаказВТекущемРТУ из ЗаказыВТекущемРТУ Цикл
		
		ОписаниеРезультирующегоРТУ = ОписаниеРезультирующегоРТУ + "№" + ЗаказВТекущемРТУ.Представление + ", ";
		ОбщаяСумма = ОбщаяСумма + ЗаказВТекущемРТУ.Значение;
		
	КонецЦикла;
	
	Для Каждого ВыбраннаяСтрока из ВыбранныеСтроки Цикл
		
		ЗаказыВыбраннойСтроки = СтрРазделить(ВыбраннаяСтрока.ЗаказыКаргомарт, Символы.ПС, Ложь);
		
		Для Каждого ЗаказВыбраннойСтроки из ЗаказыВыбраннойСтроки Цикл
			ОписаниеРезультирующегоРТУ = ОписаниеРезультирующегоРТУ + "№" + ЗаказВыбраннойСтроки + ", ";
		КонецЦикла;
		
		ОбщаяСумма = ОбщаяСумма + ВыбраннаяСтрока.СуммаДокумента;
		
	КонецЦикла;
	
	ОписаниеРезультирующегоРТУ = Лев(ОписаниеРезультирующегоРТУ, СтрДлина(ОписаниеРезультирующегоРТУ) - 2) + Символы.ПС + "на общую сумму " + ОбщаяСумма + " руб.";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОписаниеРезультирующегоРТУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовЗаказчикаВыбранПриИзменении(Элемент)
	
	ОбновитьОписаниеРезультирующегоРТУ();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбъединение(Команда)
	
	Результат = ВыполнитьОбъединениеНаСервере();
	
	Если Результат.КодОшибки = 0 Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
		
	Если Результат.Лог <> "" Тогда
		ПоказатьПредупреждение(, СокрЛП(Результат.Лог),, "Информация");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КНайти(Команда)
	КНайтиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтбораПриИзменении(Элемент)
	
	//Если 	ЗначениеЗаполнено(ОтборНомерЗаявки) 
	//	ИЛИ ЗначениеЗаполнено(ОтборГруз) 
	//	ИЛИ ЗначениеЗаполнено(ОтборГрузополучатель)
	//	ИЛИ ЗначениеЗаполнено(ОтборПеревозчик)
	//	ИЛИ ЗначениеЗаполнено(ОтборНомерДокумента) Тогда
	//	Элементы.КНайти.КнопкаПоУмолчанию = Истина;
	//Иначе
	//	Элементы.КНайти.КнопкаПоУмолчанию = Ложь;
	//КонецЕсли;
	
КонецПроцедуры
