#Область ПЕРМЕННЫЕ_ДИАДОК

&НаКлиенте
Перем РасширениеДиадок_ОсновнаяФормаМодуляДиадок;

#КонецОбласти //ПЕРМЕННЫЕ_ДИАДОК

#Область ФУНКЦИИ_ИНИЦИАЛИЗАЦИИ_МОДУЛЯ_ДИАДОК

&НаКлиенте
Функция РасширениеДиадок_ОсновнаяФормаМодуля(НужнаИнициализацияМодуля = Истина)
	
	Если РасширениеДиадок_ОсновнаяФормаМодуляДиадок = Неопределено Тогда
		
		Попытка
			РасширениеДиадок_ОсновнаяФормаМодуляДиадок= ПолучитьФорму("ВнешняяОбработка.Внешний_Модуль_ДиадокУФ.Форма.Форма_Основная", Новый Структура("ВызовИзРасширения"),,"Модуль_ДиадокУФ.Форма_Основная");
		Исключение
		КонецПопытки;
		
		Если РасширениеДиадок_ОсновнаяФормаМодуляДиадок = Неопределено И РасширениеДиадок_ПодключитьВнешнююОбработкуМодуля() Тогда
			
			Попытка
				РасширениеДиадок_ОсновнаяФормаМодуляДиадок= ПолучитьФорму("ВнешняяОбработка.Внешний_Модуль_ДиадокУФ.Форма.Форма_Основная", Новый Структура("ВызовИзРасширения"),,"Модуль_ДиадокУФ.Форма_Основная");
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если РасширениеДиадок_ОсновнаяФормаМодуляДиадок = Неопределено Тогда
			Сообщить("Не удалось подключить обработку ""Модуль работы с электронными первичными документами через Диадок"" из справочника ""Дополнительные отчеты и обработки""");
		КонецЕсли;
		
	КонецЕсли;
	
	Если РасширениеДиадок_ОсновнаяФормаМодуляДиадок <> Неопределено Тогда
		
		Если РасширениеДиадок_ОсновнаяФормаМодуляДиадок.Платформа = Неопределено Тогда
			РасширениеДиадок_ОсновнаяФормаМодуляДиадок.ИнициализироватьПлатформу();
		КонецЕсли;
		
		Если НужнаИнициализацияМодуля И РасширениеДиадок_ОсновнаяФормаМодуляДиадок.Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок = Неопределено Тогда
			РасширениеДиадок_ОсновнаяФормаМодуляДиадок.ИнициализироватьМодуль();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасширениеДиадок_ОсновнаяФормаМодуляДиадок;
	
КонецФункции

&НаСервереБезКонтекста
Функция РасширениеДиадок_ПодключитьВнешнююОбработкуМодуля()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК Т
	|ГДЕ
	|	Т.ИмяОбъекта = ""Модуль_ДиадокУФ""
	|	И Т.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
	|	И НЕ Т.ПометкаУдаления");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Попытка
			ВнешниеОбработки.Подключить(ПолучитьНавигационнуюСсылку(Выборка.Ссылка, "ХранилищеОбработки"), "Внешний_Модуль_ДиадокУФ", Ложь);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти //ФУНКЦИИ_ИНИЦИАЛИЗАЦИИ_МОДУЛЯ_ДИАДОК

#Область ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ_ДИАДОК

&НаСервереБезКонтекста
Функция РасширениеДиадок_СостояниеСопоставленияОбъектов(Организация, Контрагент, ДокументСсылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК Т
	|ГДЕ
	|	Т.Объект = &Организация
	|	И Т.Свойство = &ЯщикОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК Т
	|ГДЕ
	|	Т.Объект = &Контрагент
	|	И Т.Свойство = &ЯщикКонтрагентаПрефикс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК Т
	|ГДЕ
	|	Т.Объект = &Документ
	|	И Т.Свойство = &ИдентификаторДокументаВДиадок
	|	И Т.Значение <> """"");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент" , Контрагент);
	Запрос.УстановитьПараметр("Документ"   , ДокументСсылка);
	
	Запрос.УстановитьПараметр("ЯщикОрганизации"				 , ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ЯщикДиадокДляОрганизации"));
	Запрос.УстановитьПараметр("ЯщикКонтрагентаПрефикс"		 , ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ДДКонтр_"));
	Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторДокументаВДиадок"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Запрос = Неопределено;
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", НЕ РезультатЗапроса[0].Пустой());
	Результат.Вставить("Контрагент"	, НЕ РезультатЗапроса[1].Пустой());
	Результат.Вставить("Документ"	, НЕ РезультатЗапроса[2].Пустой());
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти //ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ_ДИАДОК


//+++ 2022.03.22 Конинин В.В.

&НаСервере
Функция ВернутьВариантОплаты(СтрокаВариантаОплаты)
	
	ВариантыОплатВсе = Новый Массив;
	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КДВКаргомартВариантыОплатыПеревозки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Перечисление.КДВКаргомартВариантыОплатыПеревозки КАК КДВКаргомартВариантыОплатыПеревозки";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если СтрокаВариантаОплаты = Строка(РезультатЗапроса.Ссылка) или СтрокаВариантаОплаты = XMLСтрока(РезультатЗапроса.Ссылка) Тогда
				
				ВариантОплатыСтруктура = Новый Структура;
				ВариантОплатыСтруктура.Вставить("Ссылка", 	РезультатЗапроса.Ссылка);
				ВариантОплатыСтруктура.Вставить("Строка", 	Строка(РезультатЗапроса.Ссылка));
				ВариантОплатыСтруктура.Вставить("Имя", 		XMLСтрока(РезультатЗапроса.Ссылка));
						
				Прервать;
				
		КонецЕсли;		
	
	КонецЦикла;
	
		
	Возврат ВариантОплатыСтруктура;
	
КонецФункции

//--- 2022.03.22 Конинин В.В.



//Процедура скрывает не использыемые элементы формы
&НаСервере
Процедура СкрытьНеИспользуемыеЭлементы()
	
//+++ 2022.03.17 Конинин В.В.

	Элементы.КОбъединитьРТУ.Видимость = Ложь; //Есить отдельная внешняя обработка

//--- 2022.03.17 Конинин В.В.	
	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.НомерЗаказаКаргомарт) Тогда
		
		Отказ = Истина;
		//Сообщить("Не указан Идентификатор заказа КаргоМарт");
		Возврат;
		
	КонецЕсли;
	
	//КВВ++ 2022.03.01 Добавил новый параметр ЗаказКаргомарт
	Попытка
		
		ЗаказКаргоМарт = Документы.КДВКаргомартЗаказ.НайтиПоНомеру(Параметры.НомерЗаказаКаргомарт);
		
	Исключение
		
		Сообщить(НСтр(" ru = 'Не удалось получить ссылку на заказ по номеру " + Параметры.НомерЗаказаКаргомарт + "'"));
		Отказ = Истина;
		
	КонецПопытки;
	
	Объект.Организация 		= Параметры.Организация;
	
	НомерЗаказаКаргомарт 	= Параметры.НомерЗаказаКаргомарт;
	РежимРаботы 			= Параметры.РежимРаботы;
	Протокол 				= Параметры.Протокол;
	
	ЭтаФорма.АвтоЗаголовок 	= Ложь;
	
	Если РежимРаботы = 0 Тогда
		ЭтаФорма.Заголовок = "Проверка сканов, Заказ Каргомарт №" + НомерЗаказаКаргомарт;
	ИначеЕсли РежимРаботы = 1 Тогда
		ЭтаФорма.Заголовок = "Проверка оригиналов, Заказ Каргомарт №" + НомерЗаказаКаргомарт;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Параметры.ПапкаСкриптовJS) Тогда
		Объект.ПапкаСкриптовJS = Параметры.ПапкаСкриптовJS;
	КонецЕсли;
	
	ЗаполнитьДанныеПоЗаказуКаргоМартНаСервере(Отказ);
	
	РасширенныеПраваБухгалтера = РольДоступна("КДВКаргомартРасширенныеПраваБухгалтера");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСканыДокументаНаСервере(ИдентификаторДокумента)
	
	
	ОтменитьОтображениеСкановНаСервере();
	
	ОтобразитьСканыДокументаНаСервере(ИдентификаторДокумента);
	
	Элементы.ДНетИзображений.Видимость = ОтображаемыеСканы.Количество() = 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоЗаказуКаргоМартНаСервере(Отказ)
	
	//+++ 2022.03.21 Конинин В.В. Добавил выбор поля ВариантОплатыПеревозки
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	КДВКаргоМартЗаказ.Ссылка КАК Ссылка,
	             	  |	КДВКаргоМартЗаказ.Номер КАК НомерЗаказаКаргоМарт,
	             	  |	КДВКаргоМартЗаказ.Организация КАК Организация,
	             	  |	КДВКаргоМартЗаказ.ДатаПогрузки КАК ДатаПогрузки,
	             	  |	КДВКаргоМартЗаказ.ДатаВыгрузки КАК ДатаВыгрузки,
	             	  |	КДВКаргоМартЗаказ.Перевозчик КАК Перевозчик,
	             	  |	КДВКаргоМартЗаказ.Заказчик КАК Заказчик,
	             	  |	ВЫБОР
	             	  |		КОГДА КДВКаргомартДлинныеСтроки.Свойство = ""ДетальнаяИнформация""
	             	  |			ТОГДА КДВКаргомартДлинныеСтроки.Значение
	             	  |	КОНЕЦ КАК ДетальнаяИнформация,
	             	  |	КДВКаргоМартЗаказ.Контроллер КАК ТекущийБухгалтер,
	             	  |	КДВКаргоМартЗаказ.МаршрутПредставление КАК МаршрутПредставление,
	             	  |	КДВКаргоМартЗаказ.ПеревозчикСуммаБезНДС + КДВКаргоМартЗаказ.ПеревозчикСуммаНДС КАК КОплате,
	             	  |	КДВКаргоМартЗаказ.ЗаказчикСуммаБезНДС + КДВКаргоМартЗаказ.ЗаказчикСуммаНДС КАК Выручка,
	             	  |	КДВКаргоМартЗаказ.ДокументПоступленияОтПеревозчика КАК ДокументПТУ,
	             	  |	ЕСТЬNULL(КДВКаргоМартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.НеПроверен)) КАК РезультатПроверки,
	             	  |	ЕСТЬNULL(КДВКаргоМартПроверкаЗаказовСрезПоследних.Контроллер, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Контроллер,
	             	  |	ЕСТЬNULL(КДВКаргоМартПроверкаЗаказовСрезПоследних.Комментарий, """""""") КАК КомментарийПроверки,
	             	  |	КДВКаргоМартЗаказ.ТрекНомер КАК ТрекНомер,
	             	  |	КДВКаргоМартЗаказ.ТребуетсяОбновлениеЗРДС КАК ТребуетсяОбновлениеЗРДС,
	             	  |	КДВКаргоМартЗаказ.ДокументЗРДСОплатаПеревозчику КАК ДокументЗРДСОплатаПеревозчику,
	             	  |	КДВКаргоМартЗаказ.ВариантОплатыПеревозки КАК ВариантОплатыПеревозки
	             	  |ИЗ
	             	  |	Документ.КДВКаргомартЗаказ КАК КДВКаргоМартЗаказ
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДВКаргомартПроверкаЗаказов.СрезПоследних КАК КДВКаргоМартПроверкаЗаказовСрезПоследних
	             	  |		ПО КДВКаргоМартЗаказ.Ссылка = КДВКаргоМартПроверкаЗаказовСрезПоследних.ЗаказКаргомарт
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДВКаргомартДлинныеСтроки КАК КДВКаргомартДлинныеСтроки
	             	  |		ПО КДВКаргоМартЗаказ.Ссылка = КДВКаргомартДлинныеСтроки.Объект
	             	  |ГДЕ
	             	  |	КДВКаргоМартЗаказ.Номер = &НомерЗаказаКаргоМарт
	             	  |	И КДВКаргоМартЗаказ.Организация = &Организация";
	Запрос.УстановитьПараметр("НомерЗаказаКаргоМарт", 		НомерЗаказаКаргоМарт);
	Запрос.УстановитьПараметр("Организация", 					Объект.Организация);
	ВыборкаДанныеЗаказа = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДанныеЗаказа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДанныеЗаказа.Следующий();
	
	Если ЗначениеЗаполнено(ВыборкаДанныеЗаказа.ТекущийБухгалтер)
		И ВыборкаДанныеЗаказа.ТекущийБухгалтер <> ПараметрыСеанса.ТекущийПользователь Тогда
		
		Сообщить("Данный заказ заблокирован пользователем """ + ВыборкаДанныеЗаказа.ТекущийБухгалтер + """.");
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ДокументПТУ 			= ВыборкаДанныеЗаказа.ДокументПТУ;
	
	ИсправлениеПлатежныхРеквизитовДоступно 
							= ЗначениеЗаполнено(ВыборкаДанныеЗаказа.ДокументЗРДСОплатаПеревозчику)
		И НЕ ВыборкаДанныеЗаказа.ТребуетсяОбновлениеЗРДС;
		
	ДетальнаяИнформация 	= КДВКаргоМартКлиентСервер.ЗначениеИзJSON(ВыборкаДанныеЗаказа.ДетальнаяИнформация);
	
	ДопСведения 			= ?(Протокол = 2,
		КДВКаргомартКлиентСервер.ПолучитьДополнительныеСведенияИзДетальнойИнформации_v2(ДетальнаяИнформация), 
		КДВКаргомартКлиентСервер.ПолучитьДополнительныеСведенияИзДетальнойИнформации_v1(ДетальнаяИнформация));
		
	ВариантОплатыПеревозки = ДопСведения.ВариантОплатыПеревозки;
	
	Если Не ЗначениеЗаполнено(ДопСведения.ГрузоОтправитель) Тогда
		ДопСведения.ГрузоОтправитель = ВыборкаДанныеЗаказа.Заказчик;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДопСведения.ГрузоПолучатель) Тогда
		ДопСведения.ГрузоПолучатель = ВыборкаДанныеЗаказа.Заказчик;
	КонецЕсли;
	
	НомерЗаказаКаргоМарт = ВыборкаДанныеЗаказа.НомерЗаказаКаргоМарт;
//+++ 2022.03.18 Конинин В.В. Ссылочные типы делаем ссылочными, а не текстовыми
//Все что закоменчено ниже это Было, после блок Стало.
	
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Маршрут";
	СтрокаРеквизитЗаказа.Значение 		= ВыборкаДанныеЗаказа.МаршрутПредставление;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.МаршрутПредставление;
	
	//--- 2022.03.21 Конинин В.В.
		
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Дата погрузки";
	СтрокаРеквизитЗаказа.Значение 		= ВыборкаДанныеЗаказа.ДатаПогрузки;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.ДатаПогрузки;
	
	//--- 2022.03.21 Конинин В.В.
	
	
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Дата выгрузки";
	СтрокаРеквизитЗаказа.Значение 		= ВыборкаДанныеЗаказа.ДатаВыгрузки;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.ДатаВыгрузки;
	
	//--- 2022.03.21 Конинин В.В.
	
	
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Заказчик";
	СтрокаРеквизитЗаказа.Значение 		= ВыборкаДанныеЗаказа.Заказчик;
	
	//+++ 2022.03.21 Конинин В.В.

	СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.Заказчик;
	
	//--- 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Грузоотправитель";
	СтрокаРеквизитЗаказа.Значение 		= ДопСведения.ГрузоОтправитель;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ДопСведения.ГрузоОтправитель;
	
	//--- 2022.03.21 Конинин В.В.
		
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Грузополучатель";
	СтрокаРеквизитЗаказа.Значение 		= ДопСведения.ГрузоПолучатель;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ДопСведения.ГрузоПолучатель;
	
	//--- 2022.03.21 Конинин В.В.
		
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Перевозчик";
	СтрокаРеквизитЗаказа.Значение 		= ВыборкаДанныеЗаказа.Перевозчик;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.Перевозчик;
	
	//--- 2022.03.21 Конинин В.В.
	
	//+++ 2022.03.21 Конинин В.В.
#Область ВариантОплатыПеревозки
	
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Вариант оплаты";
	
	Если Протокол = 2 Тогда
		
		СтрокаРеквизитЗаказа.Значение 	= ВыборкаДанныеЗаказа.ВариантОплатыПеревозки;
		СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.ВариантОплатыПеревозки;
		
	Иначе
		
		ЗапросВариантОплаты = Новый Запрос;
		
		ЗапросВариантОплаты.Текст = "ВЫБРАТЬ
		                            |	ДополнительныеСведения.Значение КАК Значение
		                            |ИЗ
		                            |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		                            |ГДЕ
		                            |	ДополнительныеСведения.Объект = &Объект
		                            |	И ДополнительныеСведения.Свойство = &Свойство";
		ЗапросВариантОплаты.УстановитьПараметр("Объект", ВыборкаДанныеЗаказа.Перевозчик);
		ЗапросВариантОплаты.УстановитьПараметр("Свойство", КДВКаргомартПовтИсп.РеквизитВариантОплатыПеревозки());
		
		РезультатЗапросВариантОплаты = ЗапросВариантОплаты.Выполнить();
		
		Если Не РезультатЗапросВариантОплаты.Пустой() Тогда
			
			ВыборкаЗапросВариантОплаты = РезультатЗапросВариантОплаты.Выбрать();
			
			Пока ВыборкаЗапросВариантОплаты.Следующий() Цикл
				
				СтрокаРеквизитЗаказа.Значение = ВернутьВариантОплаты(ВыборкаЗапросВариантОплаты.Значение).Строка;
				СтрокаРеквизитЗаказа.Путь = ВыборкаЗапросВариантОплаты.Значение;
				
				//+++ 2022.03.22 Конинин В.В.
				
				ВариантОплатыПеревозки = ВыборкаЗапросВариантОплаты.Значение;
				
			КонецЦикла;
			
		// Если пусто ставим значение по умолчани
		
		Иначе 
		
			ВариантОплатыПоУмолчанию = Строка(Перечисления.КДВКаргомартВариантыОплатыПеревозки.ОплатаПоОригиналам);
			
			Если ВнестиИзмененияВДопСведения(ВариантОплатыПоУмолчанию) Тогда
			
				СтрокаРеквизитЗаказа.Значение 	= 	ВариантОплатыПоУмолчанию;
				СтрокаРеквизитЗаказа.Путь 		= 	ВернутьВариантОплаты(ВариантОплатыПоУмолчанию).Имя; 
				
				//+++ 2022.03.22 Конинин В.В.
				
				ВариантОплатыПеревозки = ВернутьВариантОплаты(ВариантОплатыПоУмолчанию).Имя;
					
			Иначе
			
				Сообщить(НСтр(" ru = ' Вариант оплаты перевозки не определен, но не удалось изменить его значение!'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;

#КонецОбласти //ВариантОплатыПеревозки
		
	//--- 2022.03.21 Конинин В.В.
		
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Груз";
	СтрокаРеквизитЗаказа.Значение 		= ДопСведения.ОписаниеГруза;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ДопСведения.ОписаниеГруза;
	
	//--- 2022.03.21 Конинин В.В.
		
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Машина";
	СтрокаРеквизитЗаказа.Значение 		= ДопСведения.Машина;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ДопСведения.Машина;
	
	//--- 2022.03.21 Конинин В.В.
		
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Водитель";
	СтрокаРеквизитЗаказа.Значение 		= ДопСведения.Водитель;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ДопСведения.Водитель;
	
	//--- 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "К оплате";
	СтрокаРеквизитЗаказа.Значение 		= ВыборкаДанныеЗаказа.КОплате;//Формат(СуммыТранспортнойУслуги.СуммаБезНДС + СуммыТранспортнойУслуги.СуммаНДС, "ЧДЦ=2") + "руб.( в т.ч. НДС " 
		//+ Формат(СуммыТранспортнойУслуги.СуммаНДС, "ЧДЦ=2") + "руб.)";
		
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.КОплате;
	
	//--- 2022.03.21 Конинин В.В.
			
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Выручка";
	СтрокаРеквизитЗаказа.Значение 		= ВыборкаДанныеЗаказа.Выручка;//Формат(СуммыДляЗаказчика.СуммаБезНДС + СуммыДляЗаказчика.СуммаНДС, "ЧДЦ=2") + "руб.( в т.ч. НДС " 
		//+ Формат(СуммыДляЗаказчика.СуммаНДС, "ЧДЦ=2") + "руб.)";
		
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.Выручка;
		
	//--- 2022.03.21 Конинин В.В.
			
	СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
	СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Комментарий";
	СтрокаРеквизитЗаказа.Значение 		= ДопСведения.КомментарийЗаказчика;
	
	//+++ 2022.03.21 Конинин В.В.
	
	СтрокаРеквизитЗаказа.Путь 		= ДопСведения.КомментарийЗаказчика;
	
	//--- 2022.03.21 Конинин В.В.
		
	Если ЗначениеЗаполнено(ВыборкаДанныеЗаказа.ТрекНомер) И Протокол = 2 Тогда
		
		СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
		СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Трек-номер";
		СтрокаРеквизитЗаказа.Значение 		= ВыборкаДанныеЗаказа.ТрекНомер;
		
		//+++ 2022.03.21 Конинин В.В.
		
		СтрокаРеквизитЗаказа.Путь 		= ВыборкаДанныеЗаказа.ТрекНомер;
		
		//--- 2022.03.21 Конинин В.В.
				
	    СтрокаРеквизитЗаказа = ТаблицаРеквизитыЗаказа.Добавить();
		СтрокаРеквизитЗаказа.ИмяРеквизита 	= "Почтовая служба";
		СтрокаРеквизитЗаказа.Значение 		= ДопСведения.ПочтоваяСлужба;
		
		//+++ 2022.03.21 Конинин В.В.
		
		СтрокаРеквизитЗаказа.Путь 		= ДопСведения.ПочтоваяСлужба;
		
		//--- 2022.03.21 Конинин В.В.
	
	КонецЕсли;
	
	
	//Заполним список полученных документов по заказу.
	ТаблицаДокументовЗаказа.Очистить();
	ЗаполнитьСписокДокументовПоЗаказу();
	
	СостояниеПроверкиДокументов = Перечисления.КДВКаргомартРезультатПроверкиДокументов.Индекс(ВыборкаДанныеЗаказа.РезультатПроверки);
	//нужно установить состояние проверки ЭДО
	
	
	КДВКаргомартСервер.ОсвободитьЗанятыеЗаказы(ПараметрыСеанса.ТекущийПользователь);
	
	//КВВ++
	//Было:    
	//
	//
	////Закрепление текущего заказа за текущим пользователем
	//МЗ = РегистрыСведений.КДВКаргоМартЗаказы.СоздатьМенеджерЗаписи();
	//МЗ.Организация 				= ВыборкаДанныеЗаказа.Организация;
	//МЗ.НомерЗаказаКаргомарт 	= ВыборкаДанныеЗаказа.НомерЗаказаКаргоМарт;
	//МЗ.Прочитать();
	//
	//МЗ.Контроллер 				= ПараметрыСеанса.ТекущийПользователь;
	//
	//Попытка
	//	МЗ.Записать(Истина);
	//Исключение
	//	Сообщить("Не удалось заблокировать выбранный заказ КаргоМарт." + Символы.ПС + "Подробности: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки; 
	//
	//Стало:
	
	//Закрепление текущего заказа за текущим пользователем
	
	МЗ = ВыборкаДанныеЗаказа.Ссылка.ПолучитьОбъект();
	МЗ.Контроллер 				= ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
		МЗ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось заблокировать выбранный заказ КаргоМарт." + Символы.ПС + "Подробности: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьСписокДокументовПоЗаказу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.ИдентификаторПервичногоДокумента КАК ИдентификаторДокумента,
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.ВидДокумента КАК ВидДокумента,
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.РезультатПроверки КАК РезультатПроверки,
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.Контроллер КАК Контроллер,
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.ДатаПроверки КАК ДатаПроверки,
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.ДатаДокумента КАК ДатаДокумента,
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.НомерДокумента КАК НомерДокумента,
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА КДВКаргоМартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.НеПроверен)
	|			ТОГДА 0
	|		КОГДА КДВКаргоМартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОтказПроверкиСкана)
	|			ТОГДА 1
	|		КОГДА КДВКаргоМартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.СканПроверен)
	|			ТОГДА 2
	|		КОГДА КДВКаргоМартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОтказПроверкиОРигинала)
	|			ТОГДА 3
	|		КОГДА КДВКаргоМартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОригиналПроверен)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезультатПроверкиКартинка
	|ИЗ
	|	РегистрСведений.КДВКаргомартПроверкаДокументовПоЗаказу КАК КДВКаргоМартПроверкаДокументовПоЗаказу
	|ГДЕ
	|	КДВКаргоМартПроверкаДокументовПоЗаказу.ЗаказКаргомарт.Номер = &НомерЗаказаКаргомарт";
	Запрос.УстановитьПараметр("НомерЗаказаКаргомарт", НомерЗаказаКаргомарт);
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() = Ложь Тогда
		
		Выборка = Результат.Выбрать();
		Отбор = Новый Структура;
		
		Пока Выборка.Следующий() Цикл
			
			Отбор.Вставить("ИдентификаторДокумента", Выборка.ИдентификаторДокумента);
			
			Если ТаблицаДокументовЗаказа.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаб = ТаблицаДокументовЗаказа.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаб, Выборка);
			СтрокаТаб.ПредставлениеДокумента 	= Строка(Выборка.ВидДокумента) + ?(ЗначениеЗаполнено(Выборка.НомерДокумента), " №" + Выборка.НомерДокумента, "") + " от " + Формат(Выборка.ДатаДокумента, "ДЛФ=D") + "г.";
			СтрокаТаб.НеПроверенВ_БД 			= СтрокаТаб.РезультатПроверкиКартинка = 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлыИзображенийССервера()
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//КВВ++
	//Было:
	//"ВЫБРАТЬ
	//               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	//               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.Ссылка КАК Ссылка,
	//               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	//               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.Расширение КАК Расширение,
	//               |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугПрисоединенныеФайлы.Описание КАК СТРОКА(36)) КАК Описание
	//               |ИЗ
	//               |	РегистрСведений.КДВКаргомартЗаказы КАК КДВКаргомартЗаказы
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоступлениеТоваровУслугПрисоединенныеФайлы КАК ПоступлениеТоваровУслугПрисоединенныеФайлы
	//               |		ПО КДВКаргомартЗаказы.ДокументПоступленияОтПеревозчика = ПоступлениеТоваровУслугПрисоединенныеФайлы.ВладелецФайла
	//               |ГДЕ
	//               |	КДВКаргомартЗаказы.ИдентификаторКаргомарт = &ИдентификаторКаргомарт
	//               |	И КДВКаргомартЗаказы.Организация = &Организация";
	//Запрос.УстановитьПараметр("ИдентификаторКаргомарт", ИдентификаторКаргоМарт);
	//Стало:
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	ПоступлениеТоваровУслугПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслугПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ПоступлениеТоваровУслугПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслугПрисоединенныеФайлы.Описание КАК СТРОКА(36)) КАК Описание
	|ИЗ
	|	Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоступлениеТоваровУслугПрисоединенныеФайлы КАК ПоступлениеТоваровУслугПрисоединенныеФайлы
	|		ПО КДВКаргомартЗаказ.ДокументПоступленияОтПеревозчика = ПоступлениеТоваровУслугПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	КДВКаргомартЗаказ.Номер = &НомерЗаказаКаргомарт
	|	И КДВКаргомартЗаказ.Организация = &Организация";  
	Запрос.УстановитьПараметр("НомерЗаказаКаргомарт", НомерЗаказаКаргомарт);
	Запрос.УстановитьПараметр("Организация", 			Объект.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ФайлИзображения 			= РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка, Ложь);
		
		Если ФайлИзображения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныеФайла = Новый Структура;
		СтруктураДанныеФайла.Вставить("ИмяФайла", 				XMLСтрока(Выборка.Ссылка));
		СтруктураДанныеФайла.Вставить("Расширение", 			Выборка.Расширение);
		СтруктураДанныеФайла.Вставить("АдресХранилищаФайла", 	ПоместитьВоВременноеХранилище(ФайлИзображения));
		
		Результат.Добавить(СтруктураДанныеФайла);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтобразитьСканыДокументаНаСервере(ИдентификаторДокумента)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.Ссылка КАК Ссылка,
	               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.Расширение КАК Расширение,
				   |	ПоступлениеТоваровУслугПрисоединенныеФайлы.Описание КАК Описание,
	               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.Наименование КАК ИмяФайла
	               |ИЗ
	               |	Справочник.ПоступлениеТоваровУслугПрисоединенныеФайлы КАК ПоступлениеТоваровУслугПрисоединенныеФайлы
	               |ГДЕ
	               |	ПоступлениеТоваровУслугПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	               |	И ПоступлениеТоваровУслугПрисоединенныеФайлы.ВладелецФайла = &ДокПТУ
	               |	И ПоступлениеТоваровУслугПрисоединенныеФайлы.Описание ПОДОБНО &ИДДокумента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("ДокПТУ",			ДокументПТУ);
	Запрос.УстановитьПараметр("ИДДокумента", 	ИдентификаторДокумента);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Итр 	= 0;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТипаЧ = Новый ОписаниеТипов(МассивТипов,,, Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Любой));
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипаС = Новый ОписаниеТипов(МассивТипов,,,, Новый КвалификаторыСтроки());
	
	Пока Выборка.Следующий() Цикл
		
		АдресФайлаИзображения 		= "file://" + СтрЗаменить(Объект.ПапкаСкриптовJS + "1CTmpImg/", "\", "/") 
			+ XMLСтрока(Выборка.Ссылка) + "." + Выборка.Расширение;

		Итр 			= Итр + 1;
		ИмяСкана 		= "Скан" + Формат(Итр, "ЧГ=0");
		
		ОтображаемыеСканы.Добавить(ИмяСкана);
		
		ГруппаСкан 						= Элементы.Вставить("Гр" + ИмяСкана, Тип("ГруппаФормы"), Элементы.ГрСтраницыДляHTML);
		ГруппаСкан.Заголовок 			= Строка(Итр) + "(" + Выборка.ИмяФайла + ")";
		//ГруппаСкан.Вид 					= ВидСтрани;
		//ГруппаСкан.ОтображатьЗаголовок 	= Ложь;
		ГруппаСкан.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		ГруппаКнопки 						= Элементы.Вставить("ГрКнопки" + ИмяСкана, Тип("ГруппаФормы"), ГруппаСкан);
		ГруппаКнопки.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКнопки.ОтображатьЗаголовок 	= Ложь;
		ГруппаКнопки.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ЗаполнитьЗначенияСвойств(ГруппаКнопки, Элементы.ГрКнопкиУправления,, "ПутьКДаннымЗаголовка");
		
		КПоворотПрЧ = Команды.Добавить("КПоворотПрЧ" + ИмяСкана);
		КПоворотПрЧ.Действие = "ПоворотПротивЧасовой";
		КПоворотПрЧ.Заголовок = "Поворот против часовой стрелки";
		
		КнПоворотПрЧ 				= Элементы.Добавить("КнПоворотПрЧ" + ИмяСкана, Тип("КнопкаФормы"), ГруппаКнопки);
		ЗаполнитьЗначенияСвойств(КнПоворотПрЧ, Элементы.КнПротивЧасовой);
		КнПоворотПрЧ.ИмяКоманды = "КПоворотПрЧ" + ИмяСкана;
		
		КПоворотПЧ = Команды.Добавить("КПоворотПЧ" + ИмяСкана);
		КПоворотПЧ.Действие = "ПоворотПоЧасовой";
		КПоворотПЧ.Заголовок = "Поворот по часовой стрелки";
		
		КнПоворотПЧ 				= Элементы.Добавить("КнПоворотПЧ" + ИмяСкана, Тип("КнопкаФормы"), ГруппаКнопки);
		ЗаполнитьЗначенияСвойств(КнПоворотПЧ, Элементы.КнПоЧасовой);
		КнПоворотПЧ.ИмяКоманды = "КПоворотПЧ" + ИмяСкана;
		
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Масштаб" + ИмяСкана, 				ОписаниеТипаЧ, , "Масштаб"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УголПоворота" + ИмяСкана, 			ОписаниеТипаЧ, , "Угол поворота"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("HTML" + ИмяСкана, 					ОписаниеТипаС, , ""));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("АдресФайлаИзображения" + ИмяСкана, 	ОписаниеТипаС, , ""));
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ЭтаФорма["Масштаб" + ИмяСкана] 					= 150;
		Этаформа["УголПоворота" + ИмяСкана] 			= 0;
		Этаформа["АдресФайлаИзображения" + ИмяСкана] 	= АдресФайлаИзображения;
		
		ПолеМасштаб 				= Элементы.Добавить("ПМасштаб" + ИмяСкана, Тип("ПолеФормы"), ГруппаКнопки);
		ПолеМасштаб.Вид 			= ВидПоляФормы.ПолеПереключателя;
		ПолеМасштаб.ПутьКДанным 	= "Масштаб" + ИмяСкана;
		ПолеМасштаб.Заголовок 		= "Масштаб";
		ПолеМасштаб.УстановитьДействие("ПриИзменении", "БыстрыйПросмотрМасштабДокументаПриИзменении");
		
		ЗаполнитьЗначенияСвойств(ПолеМасштаб, Элементы.БыстрыйПросмотрМасштабДокумента,,"ПутьКДанным");
		
		ПолеHTML 					= Элементы.Добавить("ПолеHTML" + ИмяСкана, Тип("ПолеФормы"), ГруппаСкан);
		ПолеHTML.Вид 				= ВидПоляФормы.ПолеHTMLДокумента;
		ПолеHTML.ПутьКДанным 		= "HTML" + ИмяСкана;
		ПолеHTML.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			
		//Здесь разветвить на pdf и картинки
		
		Если Прав(Выборка.Расширение, 3) = "pdf" Тогда
			
			//СтрокаФайла 				= Base64Строка(ФайлИзображения);
			
			АдресСкрипта_pdf_min_js 		= "file://" + СтрЗаменить(Объект.ПапкаСкриптовJS, "\", "/") + "pdf.min.js";
			АдресСкрипта_pdf_worker_min_js 	= "file://" + СтрЗаменить(Объект.ПапкаСкриптовJS, "\", "/") + "pdf.worker.min.js";
			ЭтаФорма["HTML" + ИмяСкана] 	= 
			"<!DOCTYPE html>
			|<html>
			|	<head>
			|		<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" />
			|		<meta name=""viewport"" content=""width=device-width, initial-scale = 1.0, maximum-scale = 1.0, user-scalable=no"">
			|	</head>
			|	<body>
			|		<script src=""" + АдресСкрипта_pdf_min_js + """></script>
			|		<canvas id=""the-canvas""></canvas>
			|		<script>
			|			var currPage = 1; //Pages are 1-based not 0-based
			|			var numPages = 0;
			|			var thePDF = null;
			|			pdfjsLib.GlobalWorkerOptions.workerSrc = """ + АдресСкрипта_pdf_worker_min_js + """;
			|			var loadingTask = pdfjsLib.getDocument(""" + АдресФайлаИзображения + """);
			|			loadingTask.promise.then(function(pdf) {
			|			       
			|			     thePDF = pdf;
			|			     numPages = pdf.numPages;
			|			
			|			     pdf.getPage(1).then(handlePages);                      
			|			
			|			     function handlePages(page) { 
			|			        var scale = 1.5       ;
			|			        var rotation = 0         ;
			|			
			|			        var viewport = page.getViewport({scale: scale, rotation: rotation});
			|			
			|			        var canvas = document.createElement( ""canvas"" );
			|			        canvas.style.display = ""block"";
			|			        var context = canvas.getContext('2d');
			|			        canvas.height = viewport.height;
			|			        canvas.width = viewport.width;
			|			
			|			        var renderContext = {
			|			              canvasContext: context,
			|			              viewport: viewport
			|			        };
			|			        var renderTask = page.render(renderContext);
			|			
			|			         document.body.appendChild( canvas );
			|			
			|			        currPage++;
			|			        if ( thePDF !== null && currPage <= numPages )
			|			        {
			|			            thePDF.getPage( currPage ).then( handlePages );
			|			        }
			|			       };
			|			
			|			});
			|		</script>
			|	</body>
			|</html>";
			
		Иначе
			
			//ИзображениеВХранилище 			= ПоместитьВоВременноеХранилище(ФайлИзображения);
			//Попробуем работать с временными файлами в папке.
			//ВремФАйлИзображения = КаталогВременныхФайлов() + "1c_tmp_img." + Выборка.Расширение;
			//ФАйлИзображения.Записать(ВремФАйлИзображения);
			ЭтаФорма["HTML" + ИмяСкана] 	= "<!DOCTYPE html>
			|<html lang='ru'>
			|<head>
			|	<meta charset='utf-8'>
			|	<meta http-equiv='X-UA-Compatible' content='IE=edge'>
			|</head>
			|<body>
			|<form>
			|<div><img id='imgSikudaRU' style='display: ""inline-block""'></<img></div>
			|</form>
			|<script>
			|window.onload=function(){
			|var field_width = 0, field_hight = 0;
			|var idWin = document.getElementById('imgSikudaRU');
			|if(idWin === undefined) return;
			|var scale = 1.5       ;
			|var rotation = 0         ;
			|idWin.scale = scale;
			|idWin.angle = rotation;
			|idWin.src = '" + АдресФайлаИзображения + "';
			|if(idWin.angle==90 || idWin.angle==270) idWin.style.transform = 'translate('+(idWin.scale*idWin.height/2-idWin.width/2)+'px,'+(idWin.scale*idWin.width/2-idWin.height/2)+'px) rotate('+idWin.angle+'deg) scale('+idWin.scale+')';
			|else idWin.style.transform = 'translate('+(idWin.scale-1)*idWin.width/2+'px,'+(idWin.scale-1)*idWin.height/2+'px) rotate('+idWin.angle+'deg) scale('+idWin.scale+')';
			|idWin.style.filter = 'progid:DXImageTransform.Microsoft.Matrix(M11='+idWin.scale+',M12=0,M21=0,M22='+idWin.scale+',SizingMethod=""auto expand"")';
			|if(idWin.angle==90) idWin.style.filter = 'progid:DXImageTransform.Microsoft.Matrix(M11=0,M12='+(-idWin.scale)+',M21='+idWin.scale+',M22=0,SizingMethod=""auto expand"")';  
			|if(idWin.angle==180) idWin.style.filter = 'progid:DXImageTransform.Microsoft.Matrix(M11='+(-idWin.scale)+',M12=0,M21=0,M22='+(-idWin.scale)+',SizingMethod=""auto expand"")';
			|if(idWin.angle==270) idWin.style.filter = 'progid:DXImageTransform.Microsoft.Matrix(M11=0,M12='+idWin.scale+',M21='+(-idWin.scale)+',M22=0,SizingMethod=""auto expand"")';
			|idWin.style['-webkit-transform'] = idWin.style.transform;
			|idWin.style['-ms-filter'] = idWin.style.filter;
			|}
			|</script>
			|</body>
			|</html>";
			
		КонецЕсли;
		
		Для Каждого ЭлементСписка из Элементы.БыстрыйПросмотрМасштабДокумента.СписокВыбора Цикл
			ПолеМасштаб.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьОтображениеСкановНаСервере()
	
	Итр = Элементы.ГрСтраницыДляHTML.ПодчиненныеЭлементы.Количество()-1;
	
	Пока Итр >= 0 Цикл
		ЭтаФорма.Элементы.Удалить(Элементы.ГрСтраницыДляHTML.ПодчиненныеЭлементы[Итр]);
		Итр = Итр - 1;
	КонецЦикла;
	
	УдаляемыеРеквизиты = Новый Массив;
	
	Для Каждого ИмяСкана из ОтображаемыеСканы Цикл
		
		УдаляемаяКоманда = Команды.Найти("КПоворотПрЧ" + ИмяСкана);
		Если УдаляемаяКоманда <> Неопределено Тогда
			Команды.Удалить(УдаляемаяКоманда);
		КонецЕсли;
		
		УдаляемаяКоманда = Команды.Найти("КПоворотПЧ" + ИмяСкана);
		Если УдаляемаяКоманда <> Неопределено Тогда
			Команды.Удалить(УдаляемаяКоманда);
		КонецЕсли;

		УдаляемыеРеквизиты.Добавить("Масштаб" + ИмяСкана);
		УдаляемыеРеквизиты.Добавить("УголПоворота" + ИмяСкана);
		УдаляемыеРеквизиты.Добавить("HTML" + ИмяСкана);
		УдаляемыеРеквизиты.Добавить("АдресФайлаИзображения" + ИмяСкана);
		
	КонецЦикла;
	
	Если УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(,УдаляемыеРеквизиты);
	КонецЕсли;
	
	ОтображаемыеСканы.Очистить();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИсториюПроверкиЗаказаНаСервереБК(НомерЗаказаКаргоМарт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//КВВ++
	//Было:
	//"ВЫБРАТЬ
	//|	КДВКаргоМартПроверкаЗаказов.РезультатПроверки КАК РезультатПроверки,
	//|	КДВКаргоМартПроверкаЗаказов.Контроллер КАК Контроллер,
	//|	КДВКаргоМартПроверкаЗаказов.Период КАК Период,
	//|	ВЫБОР
	//|		КОГДА КДВКаргоМартПроверкаЗаказов.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОтказПроверкиСкана)
	//|			ТОГДА 1
	//|		КОГДА КДВКаргоМартПроверкаЗаказов.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.СканПроверен)
	//|			ТОГДА 2
	//|		КОГДА КДВКаргоМартПроверкаЗаказов.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОтказПроверкиОригинала)
	//|			ТОГДА 3
	//|		КОГДА КДВКаргоМартПроверкаЗаказов.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОригиналПроверен)
	//|			ТОГДА 4
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК Пиктограмма
	//|ИЗ
	//|	РегистрСведений.КДВКаргомартПроверкаЗаказов КАК КДВКаргоМартПроверкаЗаказов
	//|ГДЕ
	//|	КДВКаргоМартПроверкаЗаказов.ИдентификаторКаргомарт = &ИдентификаторКаргоМарт
	//|	И КДВКаргоМартПроверкаЗаказов.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.НеПроверен)";
	//Запрос.УстановитьПараметр("ИдентификаторКаргоМарт", ИдентификаторКаргоМарт);
	"ВЫБРАТЬ
	|	КДВКаргоМартПроверкаЗаказов.РезультатПроверки КАК РезультатПроверки,
	|	КДВКаргоМартПроверкаЗаказов.Контроллер КАК Контроллер,
	|	КДВКаргоМартПроверкаЗаказов.Период КАК Период,
	|	ВЫБОР
	|		КОГДА КДВКаргоМартПроверкаЗаказов.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОтказПроверкиСкана)
	|			ТОГДА 1
	|		КОГДА КДВКаргоМартПроверкаЗаказов.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.СканПроверен)
	|			ТОГДА 2
	|		КОГДА КДВКаргоМартПроверкаЗаказов.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОтказПроверкиОригинала)
	|			ТОГДА 3
	|		КОГДА КДВКаргоМартПроверкаЗаказов.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.ОригиналПроверен)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Пиктограмма
	|ИЗ
	|	РегистрСведений.КДВКаргомартПроверкаЗаказов КАК КДВКаргоМартПроверкаЗаказов
	|ГДЕ
	|	КДВКаргоМартПроверкаЗаказов.ЗаказКаргомарт.Номер = &НомерЗаказаКаргоМарт
	|	И КДВКаргоМартПроверкаЗаказов.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.КДВКаргоМартРезультатПроверкиДокументов.НеПроверен)";
	Запрос.УстановитьПараметр("НомерЗаказаКаргоМарт", НомерЗаказаКаргоМарт);
	Результат = Запрос.Выполнить();
	
	Возврат ТаблицаВМассивы(Результат.Выгрузить());
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиПечатиКомплектаНаСервереБК(НастройкиПечатиКомплекта)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		НастройкиПечатиКомплекта.КлючОбъекта, 
		НастройкиПечатиКомплекта.КлючНастроек, 
		НастройкиПечатиКомплекта.СохраняемыеНастройкиПечатныхФорм
		);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьНастройкиПечатныхФормНаСервереБК(КлючОбъекта, КлючНастроек)
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, Новый Массив);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОтправкиДокументовЧерезЭДОНаСервереБК(НомерЗаказаКаргоМарт)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 0);
	Результат.Вставить("Описание", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику КАК ДокРТУ,
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику.Организация КАК Организация,
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику.Контрагент КАК Контрагент,
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику.Контрагент.ИНН КАК КонтрагентИНН,
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику.Контрагент.КПП КАК КонтрагентКПП
	|ИЗ
	|	Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	|ГДЕ
	|	КДВКаргомартЗаказ.Номер = &НомерЗаказаКаргоМарт
	|	И КДВКаргомартЗаказы.Организация = &Организация";
	Запрос.УстановитьПараметр("НомерЗаказаКаргоМарт", 		НомерЗаказаКаргоМарт);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Результат.КодОшибки = 1;
		Результат.Описание = "Не найден документ РТУ для заказа Каргомарт. Отправка через сервис ЭДО отменена.";
		Возврат Результат;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат.Вставить("РеализацияСсылка", 		Выборка.ДокРТУ);
		Результат.Вставить("СФСсылка", 				УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Выборка.ДокРТУ));
		
		Если НЕ ЗначениеЗаполнено(Результат.СФСсылка) Тогда
			
			Результат.КодОшибки = 2;
			Результат.Описание = "Для документа РТУ не создана Счет-фактура. Отправка через сервис ЭДО отменена.";
			Возврат Результат;
			
		КонецЕсли;
		
		Результат.Вставить("Организация", 			Выборка.Организация);
		Результат.Вставить("КонтрагентСсылка", 		Выборка.Контрагент);
		Результат.Вставить("ДанныеКонтрагента", 	Новый Структура("Инн, Кпп", Выборка.КонтрагентИНН, Выборка.КонтрагентКПП));
		
		Возврат Результат;
		
	КонецЕсли;

	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере()
	КДВКаргомартСервер.ОсвободитьЗанятыеЗаказы(ПараметрыСеанса.ТекущийПользователь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаВМассивы(Таб) Экспорт
	
	Результат = Новый Массив;
	
	МассивКолонок = Новый Массив;
	
	Для Каждого Колонка из Таб.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Результат.Добавить(МассивКолонок);
	
	Для Каждого СтрокаТаб из Таб Цикл
		
		МассивСтрока = Новый Массив;
		
		Для Каждого Колонка из Таб.Колонки Цикл
			МассивСтрока.Добавить(СтрокаТаб[Колонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(МассивСтрока);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокФайловИзображенийПоЗаказуНаСервереБезКонтекста(НомерЗаказаКаргоМарт, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ИдентификаторПервичногоДокумента КАК ИдентификаторПервичногоДокумента,
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента,
	|	ВложенныйЗапрос.ДатаДокумента КАК ДатаДокумента,
	|	ВложенныйЗапрос.НомерДокумента КАК НомерДокумента,
	|	ПоступлениеТоваровУслугПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслугПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ПоступлениеТоваровУслугПрисоединенныеФайлы.Наименование КАК ИмяФайла
	|ИЗ
	|	(ВЫБРАТЬ
	|		КДВКаргомартЗаказ.Номер КАК НомерЗаказаКаргоМарт,
	|		КДВКаргомартЗаказ.ДокументПоступленияОтПеревозчика КАК ДокументПоступленияОтПеревозчика,
	|		КДВКаргомартПроверкаДокументовПоЗаказу.ИдентификаторПервичногоДокумента КАК ИдентификаторПервичногоДокумента,
	|		КДВКаргомартПроверкаДокументовПоЗаказу.ВидДокумента КАК ВидДокумента,
	|		КДВКаргомартПроверкаДокументовПоЗаказу.ДатаДокумента КАК ДатаДокумента,
	|		КДВКаргомартПроверкаДокументовПоЗаказу.НомерДокумента КАК НомерДокумента
	|	ИЗ
	|		Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДВКаргомартПроверкаДокументовПоЗаказу КАК КДВКаргомартПроверкаДокументовПоЗаказу
	|			ПО КДВКаргомартЗаказ.Ссылка = КДВКаргомартПроверкаДокументовПоЗаказу.ЗаказКаргомарт
	|	ГДЕ
	|		КДВКаргомартЗаказ.Номер = &НомерЗаказаКаргоМарт
	|		И КДВКаргомартЗаказы.Организация = &Организация
	|		И (КДВКаргомартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)
	|				ИЛИ КДВКаргомартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.СканПроверен)
	|				ИЛИ КДВКаргомартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОригиналПроверен))) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоступлениеТоваровУслугПрисоединенныеФайлы КАК ПоступлениеТоваровУслугПрисоединенныеФайлы
	|		ПО ВложенныйЗапрос.ДокументПоступленияОтПеревозчика = ПоступлениеТоваровУслугПрисоединенныеФайлы.ВладелецФайла
	|			И (ВложенныйЗапрос.ИдентификаторПервичногоДокумента = (ВЫРАЗИТЬ(ПоступлениеТоваровУслугПрисоединенныеФайлы.Описание КАК СТРОКА(36))))
	|ГДЕ
	|	ПоступлениеТоваровУслугПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	НомерДокумента";
	Запрос.УстановитьПараметр("НомерЗаказаКаргоМарт", НомерЗаказаКаргоМарт);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(ТабРезультат) Тогда
		
		ТабРезультат.Колонки.Добавить("СсылкаСтрока");
		Для Каждого СтрокаТаб из ТабРезультат Цикл
			СтрокаТаб.СсылкаСтрока = XMLСтрока(СтрокаТаб.Ссылка);
		КонецЦикла;
		
		Возврат ТаблицаВМассивы(ТабРезультат);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УдалитьТелаСкановНаКлиенте()
	
	Для Каждого СтрокаСкан из ОтображаемыеСканы Цикл
		ЭтаФорма["HTML" + СтрокаСкан.Значение] = "";
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура МассивыВТаблицу(Массивы, ИмяТаблицыФормы) Экспорт
	
	Если Массивы.Количество() > 0 Тогда
		
		//Для Каждого ИмяКолонки из Массивы[0] Цикл
		//	Результат.Колонки.Добавить(ИмяКолонки);
		//КонецЦикла;
		ЭтаФорма[ИмяТаблицыФормы].Очистить();
		
		Для Итр = 1 По Массивы.Количество()-1 Цикл
			
			СтрокаТаб = ЭтаФорма[ИмяТаблицыФормы].Добавить();
			
			Для ИндКолонки = 0 по Массивы[0].Количество()-1 Цикл
				Если СтрокаТаб.Свойство(Массивы[0][ИндКолонки]) <> Неопределено Тогда 
					СтрокаТаб[Массивы[0][ИндКолонки]] = Массивы[Итр][ИндКолонки];
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюПроверкиЗаказаНаКлиенте()
	МассивыВТаблицу(ПолучитьИсториюПроверкиЗаказаНаСервереБК(НомерЗаказаКаргоМарт), "ИсторияПроверкиЗаказа");
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРешениеПоЗаказу(ОтобразитьРешениеПоЗаказу = Неопределено)
	
	ОтобразитьРешениеПоЗаказу 						= ?(ОтобразитьРешениеПоЗаказу = Неопределено, Истина, ОтобразитьРешениеПоЗаказу);
	Элементы.ГрСтраницыДляHTML.Видимость 			= НЕ ОтобразитьРешениеПоЗаказу;
	Элементы.ГрРешениеПоЗаказу.Видимость 			= ОтобразитьРешениеПоЗаказу;
	
	Элементы.ГрРешениеПоДокументу.Видимость 		= НЕ ОтобразитьРешениеПоЗаказу;
	Элементы.ГрРешениеПоДокументуПравая.Доступность = РежимРаботы = 0;
	Элементы.ФлагРешениеПоДокументу.Доступность 	= РежимРаботы = 0;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПовернутьДокумент(ИмяСкана)
	
	Угол = ЭтаФорма["УголПоворота" + ИмяСкана];
	
	Если Угол < 0 Тогда
		Угол = 360 + Угол;
	КонецЕсли;
	
	СтрокаПоиска 		= "var rotation = ";
	
	УголПоворотаСтрокой = Формат(Угол, "ЧН=0; ЧГ=");
	
	Пока СтрДлина(УголПоворотаСтрокой) < 10 Цикл
		УголПоворотаСтрокой = УголПоворотаСтрокой + " ";
	КонецЦикла;
	
	ПоложениеПараметра = СтрНайти(ЭтаФорма["HTML" + ИмяСкана], СтрокаПоиска);
	
	ЭтаФорма["HTML" + ИмяСкана] = Лев(ЭтаФорма["HTML" + ИмяСкана], ПоложениеПараметра - 1) + СтрокаПоиска + УголПоворотаСтрокой + Сред(ЭтаФорма["HTML" + ИмяСкана], ПоложениеПараметра + 25);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоворотПротивЧасовой(Команда)
	
	Позиция = СтрНайти(Команда.Имя, "Скан");
	Если Позиция > 0 Тогда
		
		НомерСкана 							= Число(Сред(Команда.Имя, Позиция + 4));
		ИмяСкана 							= "Скан" + Формат(НомерСкана, "ЧГ=0");
		ЭтаФорма["УголПоворота" + ИмяСкана] = (ЭтаФорма["УголПоворота" + ИмяСкана] - 90)%360;
		
		ПовернутьДокумент(ИмяСкана);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПросмотрМасштабДокументаПриИзменении(Элемент)
	
	Позиция = СтрНайти(Элемент.Имя, "Скан");
	Если Позиция > 0 Тогда
		
		НомерСкана 							= Число(Сред(Элемент.Имя, Позиция + 4));
		ИмяСкана 							= "Скан" + Формат(НомерСкана, "ЧГ=0");
		
		Если ЭтаФорма["Масштаб" + ИмяСкана] = 0 Тогда
			ЭтаФорма["Масштаб" + ИмяСкана] = 150;
		КонецЕсли;
		
		СтрокаПоиска = "var scale = ";
		
		МасштабОтображенияСтрокой = Формат(ЭтаФорма["Масштаб" + ИмяСкана] / 100, "ЧРД=.");
		
		Пока СтрДлина(МасштабОтображенияСтрокой) < 10 Цикл
			МасштабОтображенияСтрокой = МасштабОтображенияСтрокой + " ";
		КонецЦикла;
		
		ПоложениеПараметра = СтрНайти(ЭтаФорма["HTML" + ИмяСкана], СтрокаПоиска);
		
		ЭтаФорма["HTML" + ИмяСкана] = Лев(ЭтаФорма["HTML" + ИмяСкана], ПоложениеПараметра-1) + СтрокаПоиска + МасштабОтображенияСтрокой + Сред(ЭтаФорма["HTML" + ИмяСкана], ПоложениеПараметра + 22);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоворотПоЧасовой(Команда)
	
	Позиция = СтрНайти(Команда.Имя, "Скан");
	Если Позиция > 0 Тогда
		
		НомерСкана 							= Число(Сред(Команда.Имя, Позиция + 4));
		ИмяСкана 							= "Скан" + Формат(НомерСкана, "ЧГ=0");
		ЭтаФорма["УголПоворота" + ИмяСкана] = (ЭтаФорма["УголПоворота" + ИмяСкана] + 90)%360;
		
		ПовернутьДокумент(ИмяСкана);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовЗаказаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОтобразитьРешениеПоЗаказу(Ложь);
	
	СтандартнаяОбработка 		= Ложь;
	ПерейтиКДокументу(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДокументу(ИндексДокумента)
	
	Если 	ИндексДокумента = ИндексТекущегоДокумента
		ИЛИ ИндексДокумента >= ТаблицаДокументовЗаказа.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИндексТекущегоДокумента < ТаблицаДокументовЗаказа.Количество() И ИзмененыПараметрыДокумента() = Истина Тогда
		
		ОП = Новый ОписаниеОповещения("ПерейтиКДокументуЗавершение", ЭтаФорма, ИндексДокумента);
		ПоказатьВопрос(ОП, "Сохранить решение по текущему документу?", РежимДиалогаВопрос.ДаНетОтмена, 10, КодВозвратаДиалога.Да, "Решение по текущему документу изменено", КодВозвратаДиалога.Отмена);
		
	Иначе
		ПерейтиКДокументуЗавершение(КодВозвратаДиалога.Нет, ИндексДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДокументуЗавершение(ОтветПользователя, ВыбранныйДокумент) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Отмена Тогда
		
		Элементы.ТаблицаДокументовЗаказа.ТекущаяСтрока = ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ПолучитьИдентификатор();
		Возврат;
		
	Иначе
		
		Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
			Если СохранитьРешениеПоДокументу() = Ложь Тогда
				
				Элементы.ТаблицаДокументовЗаказа.ТекущаяСтрока = ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ПолучитьИдентификатор();
		 		Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
		ОтобразитьРешениеПоЗаказу(Ложь);
		ИндексТекущегоДокумента 	= ВыбранныйДокумент;
		ТекДокументНомер 			= ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].НомерДокумента;
		ТекДокументДата 			= ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ДатаДокумента;
		ПричинаОтклоненияДокумента 	= ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].Комментарий;
		ФлагРешениеПоДокументу 		= ?(ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].РезультатПроверкиКартинка = 2 
										ИЛИ ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].РезультатПроверкиКартинка = 4, 1, 0);
		ФлагРешениеПоДокументуПриИзменении(Элементы.ФлагРешениеПоДокументу);
		Элементы.ТекДокументНомер.Доступность = НЕ Строка(ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ВидДокумента) = "ТТН" И РежимРаботы = 0;
		
		Элементы.ТаблицаДокументовЗаказа.ТекущаяСтрока = ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ПолучитьИдентификатор();
		
		НастроитьКнопкиНавигацииПоДокументам();
		УдалитьТелаСкановНаКлиенте();//Удалить данные, которые не нужно тащить на севрер. всё равно, они там пересоздадутся.
		ПоказатьСканыДокументаНаСервере(ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ИдентификаторДокумента);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкиНавигацииПоДокументам()
	
	Элементы.КнСохранитьРешениеПоДокументу.Видимость 	= РежимРаботы = 0;
	Элементы.КнСканыПроверены.Видимость 				= РежимРаботы = 0;
	Элементы.ФлагРешениеПоДокументу.Доступность 		= РежимРаботы = 0;
	Элементы.КнСохранитьРешениеПоДокументу.Доступность 	= РежимРаботы = 0 И ИзмененыПараметрыДокумента();
	Элементы.КнСледующийСкан.Доступность 				= ИндексТекущегоДокумента < ТаблицаДокументовЗаказа.Количество()-1;
	Элементы.КнПредыдущийСкан.Доступность 				= ИндексТекущегоДокумента > 0;
	Элементы.КнСканыПроверены.Доступность 				= РежимРаботы = 0 
		И ТаблицаДокументовЗаказа.НайтиСтроки(Новый Структура("РезультатПроверкиКартинка", 0)).Количество() = 0
		И Элементы.КнСохранитьРешениеПоДокументу.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ИзмененыПараметрыДокумента()
	
		
	Результат = Режимработы = 0 И (ИндексТекущегоДокумента >= ТаблицаДокументовЗаказа.Количество()
		ИЛИ НЕ (ТекДокументДата = ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ДатаДокумента
		И 	ТекДокументНомер = ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].НомерДокумента
		И ПричинаОтклоненияДокумента = ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].Комментарий
		И ФлагРешениеПоДокументу = ?(ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].РезультатПроверкиКартинка = 2, 1, 0)));
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КВернутьсяКСписку(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КОтклонитьОригиналы(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	ОП = Новый ОписаниеОповещения("КОтклонитьОригиналыЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ОткрытьФорму("ВнешняяОбработка.КДВКаргоМартРабочееМестоБухгалтера.Форма.ФормаВводПричиныОтклонения",,ЭтаФорма,,,,ОП,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КОтклонитьОригиналыЗавершение(Комментарий, ДопоплнительныеСведения) Экспорт
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		
		СтруктураРешениеПоОригинарамЗаказа = Новый Структура;
		СтруктураРешениеПоОригинарамЗаказа.Вставить("НомерЗаказаКаргоМарт", 	НомерЗаказаКаргоМарт);
		СтруктураРешениеПоОригинарамЗаказа.Вставить("ИтогПроверки", 			"ОтказПроверкиОригинала");
		СтруктураРешениеПоОригинарамЗаказа.Вставить("Комментарий", 				Комментарий);
		СтруктураРешениеПоОригинарамЗаказа.Вставить("ИтогПоДокументам", 		Новый Массив);
	
		Результат = КДВКаргомартКлиент.СохранитьРезультатПроверкиДокументовПоЗаказу(Объект.Организация, СтруктураРешениеПоОригинарамЗаказа, ВариантОплатыПеревозки);
	
		Если Результат.КодОшибки <> 0 Тогда
			ПоказатьПредупреждение(, Результат.Описание, 10,"Ошибка сохранения результата проверки оригиналов документов");
		Иначе
			
			СостояниеПроверкиДокументов = Результат.ТекущийСтатусПроверки;
			НастроитьДоступностьКнопокПроверкиОригиналов();
			
			Если ЗначениеЗаполнено(Результат.Описание) Тогда
				ПоказатьПредупреждение(, Результат.Описание,, "Информация");
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	ОбновитьИсториюПроверкиЗаказаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОтправкаЧерезЭДОЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да И РасширениеДиадок_ОсновнаяФормаМодуля() <> Неопределено Тогда
		
		//Исполнение команд отправки документа чреез ЭДО
		//Тут получить все необходимые реквизиты для отправки документа. Желательно продёрнуть их из функции проверки возможности отправки документа через ЭДО.
		ПараметрыОтправки = Новый Структура("РеализацияСсылка, СФСсылка, Организация, КонтрагентСсылка, ДанныеКонтрагента");
		
		ПараметрыОтправки.РеализацияСсылка 	= ДополнительныеПараметры.ДокРТУ;
		ПараметрыОтправки.СФСсылка 			= ДополнительныеПараметры.ДокСчФ;
		ПараметрыОтправки.Организация 		= ДополнительныеПараметры.Организация;
		ПараметрыОтправки.КонтрагентСсылка 	= ДополнительныеПараметры.Контрагент;
		ПараметрыОтправки.ДанныеКонтрагента = ДополнительныеПараметры.ДанныеКонтрагента;
		
		РасширениеДиадок_ОсновнаяФормаМодуля().ОтправитьЧерезДиадокРасширение(ПараметрыОтправки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КОригиналыКорректны(Команда)
	
	МассивПроверкиПоДокументам = Новый Массив;
	
	Для Каждого СтрокаПроверкиСканов из ТаблицаДокументовЗаказа Цикл
		Если СтрокаПроверкиСканов.РезультатПроверкиКартинка = 2 ИЛИ СтрокаПроверкиСканов.РезультатПроверкиКартинка = 4 Тогда
			МассивПроверкиПоДокументам.Добавить(Новый Структура("ИдентификаторДокумента, ВидДокумента, ДатаДокумента, НомерДокумента, ИтогПроверки, Комментарий",
				СтрокаПроверкиСканов.ИдентификаторДокумента,
				СтрокаПроверкиСканов.ВидДокумента,
				СтрокаПроверкиСканов.ДатаДокумента,
				СтрокаПроверкиСканов.НомерДокумента,
				"ОригиналПроверен",
				СтрокаПроверкиСканов.Комментарий));
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРешениеПоОригинарамЗаказа = Новый Структура;
	//КВВ++ 2022.03.01 В последующем нужно передовать ссылку, а не номер
	//Было:
	//СтруктураРешениеПоОригинарамЗаказа.Вставить("НомерЗаказаКаргоМарт", 	НомерЗаказаКаргоМарт);
	//Стало
	СтруктураРешениеПоОригинарамЗаказа.Вставить("ЗаказКаргоМарт", 	ЗаказКаргоМарт);
	СтруктураРешениеПоОригинарамЗаказа.Вставить("ИтогПроверки", 			"ОригиналПроверен");
	СтруктураРешениеПоОригинарамЗаказа.Вставить("Комментарий", 				"");
	СтруктураРешениеПоОригинарамЗаказа.Вставить("ИтогПоДокументам", 		МассивПроверкиПоДокументам);
	
	Результат = КДВКаргомартКлиент.СохранитьРезультатПроверкиДокументовПоЗаказу(Объект.Организация, СтруктураРешениеПоОригинарамЗаказа, ВариантОплатыПеревозки);
	
	СостояниеПроверкиДокументов = Результат.ТекущийСтатусПроверки;
	
	Если Результат.КодОшибки <> 0 Тогда
		ПоказатьПредупреждение(, Результат.Описание, 10,"Ошибка сохранения результата проверки оригиналов документов");
	Иначе
		
		НастроитьДоступностьКнопокПроверкиОригиналов();
		
		//КВВ++ 2022.03.01 В последующем нужно передовать ссылку, а не номер
		//Было:
		//РезультатПроверкиВозможностиОтправки = КДВКаргоМартВызовСервера.ВозможнаОтправкаЧерезЭДО(НомерЗаказаКаргоМарт, Объект.Организация);
		//КВВ++ 2022.03.03 Слишком много параметров
		//Было:
		//РезультатПроверкиВозможностиОтправки = КДВКаргоМартВызовСервера.ВозможнаОтправкаЧерезЭДО(ЗаказКаргоМарт, Объект.Организация);
		//Стало:
		РезультатПроверкиВозможностиОтправки = КДВКаргоМартВызовСервера.ВозможнаОтправкаЧерезЭДО(ЗаказКаргоМарт);
		
		Элементы.КнОтправитьПоЭДОДокументыДляЗаказчика.Видимость = РезультатПроверкиВозможностиОтправки.КодОшибки = 0;
		
		Если ЗначениеЗаполнено(Результат.Описание) Тогда
			ПоказатьПредупреждение(, Результат.Описание,, "Информация");
		КонецЕсли;
		
		//Если РезультатПроверкиВозможностиОтправки.КодОшибки = 0 Тогда
		Если Ложь Тогда//Отключим отправку через ЭДО. Временно, пока не доделаем механизм.
			
			
			
			ОП = Новый ОписаниеОповещения("ВопросОтправкаЧерезЭДОЗавершение", ЭтаФорма, РезультатПроверкиВозможностиОтправки);
			ПоказатьВопрос(	ОП, 
							"Отправить заказчику документы через ЭДО?", //Текст вопроса
							РежимДиалогаВопрос.ДаНет, 
							10, //таймаут
							КодВозвратаДиалога.Нет, // по-умолчанию
							"Возможна отправка заказчику документов через ЭДО", //Заголовок окна диалога
							КодВозвратаДиалога.Нет // по таймауту
							);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИсториюПроверкиЗаказаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагРешениеПоДокументуПриИзменении(Элемент)
	
	Элементы.ГрДокументКорректен.Видимость = ФлагРешениеПоДокументу = 1;
	Элементы.ГрОтклонитьДокумент.Видимость = ФлагРешениеПоДокументу = 0;
	
	НастроитьКнопкиНавигацииПоДокументам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьВидСогласноРежимуРаботы();
	
	ДоставитьФайлыИзображенийНаКлиент();

	Если ТаблицаДокументовЗаказа.Количество() > 0 Тогда
		
		ПерейтиКДокументуЗавершение(КодВозвратаДиалога.Нет, 0);

	КонецЕсли;
	
	ОбновитьИсториюПроверкиЗаказаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоставитьФайлыИзображенийНаКлиент()
	
	МассивДанныеФайлов = ПолучитьФайлыИзображенийССервера();
	
	ИмяПапкиФайлов 		= Объект.ПапкаСкриптовJS + "1CTmpImg";
	ПапкаФайлов 		= Новый Файл(ИмяПапкиФайлов);
	
	Если ПапкаФайлов.Существует() Тогда
		
		Попытка
			УдалитьФайлы(ИмяПапкиФайлов,"*");
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	СоздатьКаталог(ИмяПапкиФайлов);
	
	Для Каждого СтруктураФайл из МассивДанныеФайлов Цикл
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураФайл.АдресХранилищаФайла);
		ДвоичныеДанныеФайла.Записать(ИмяПапкиФайлов + "\" + СтруктураФайл.ИмяФайла + "." + СтруктураФайл.Расширение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидСогласноРежимуРаботы()
	
	Если РежимРаботы = 0 Тогда
		
		Элементы.ГрКнопкиПроверкиОригиналов.Видимость 	= Ложь;
		Элементы.ГрРешениеПоДокументу.Видимость 		= Истина;
		Элементы.ДПрогресс.Заголовок 					= "Прогресс проверки";
		
	Иначе
		
		Элементы.ГрКнопкиПроверкиОригиналов.Видимость 	= Истина;
		Элементы.ГрРешениеПоДокументу.Видимость 		= Ложь;
		Элементы.ГрНавигацияПоДокументам.Видимость 		= Ложь;
		Элементы.ДПрогресс.Заголовок 					= "Загруженные документы";
		ФлагРешениеПоДокументуПриИзменении(Элементы.ФлагРешениеПоДокументу);
		
		НастроитьДоступностьКнопокПроверкиОригиналов();
	 	НастроитьДоступностьКнопокЭДО();
	
	КонецЕсли;
	
	Элементы.ПлатежныеРеквезитыТребуютИсправления.Доступность = ИсправлениеПлатежныхРеквизитовДоступно;
	
КонецПроцедуры

&НаКлиенте
Процедура КНапечататьДокументыДляЗаказчика(Команда)
	
	//КВВ ++ 2022.03.01 
	//Было
	//	ДокРТУ = КДВКаргомартВызовСервера.ПолучитьРТУПоЗаказуКаргоМарт(НомерЗаказаКаргоМарт);
	ДокРТУ = КДВКаргомартВызовСервера.ПолучитьРТУПоЗаказуКаргоМарт(ЗаказКаргоМарт);
	
	Если ДокРТУ = Неопределено Тогда
		
		Сообщить("Не найден документ РТУ для заказа КаргоМарт.");
		Возврат;
		
	КонецЕсли;
	
	МассивОбъектовПечати = Новый Массив;
	МассивОбъектовПечати.Добавить(ДокРТУ);
	
	НастройкиПечатиКомплекта = ПолучитьНастройкиПечатиКомплекта();
	
	НастроитьПечатьУПД(НастройкиПечатиКомплекта.СохраняемыеНастройкиПечатныхФорм);
	
	СохранитьНастройкиПечатиКомплектаНаСервереБК(НастройкиПечатиКомплекта);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПечатиКомплекта", Новый Структура("Объекты, МенеджерПечати, ИмяФормы",
		МассивОбъектовПечати, "Документ.РеализацияТоваровУслуг", "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаУслуги"));
		
	//МассивДокументовРТУ = Новый Массив;
	//МассивДокументовРТУ.Добавить(ДокРТУ);
	//УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РеализацияТоваровУслуг", "УниверсальныйПередаточныйДокументКомплект", МассивДокументовРТУ, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КОтправитьПоЭДОДокументыДляЗаказчика(Команда)
	
	ПараметрыОтправки = ПолучитьПараметрыОтправкиДокументовЧерезЭДОНаСервереБК(НомерЗаказаКаргоМарт);
	
	Если ПараметрыОтправки.КодОшибки <> 0 Тогда
		
		Сообщить(ПараметрыОтправки.Описание);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтправки.Удалить("КодОшибки");
	ПараметрыОтправки.Удалить("Описание");
	
	РасширениеДиадок_ОсновнаяФормаМодуля().ОтправитьЧерезДиадокРасширение(ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПечатьУПД(НастройкиПечатныхФорм)
	
	Настроена = Ложь;
	
	Если ЗначениеЗаполнено(НастройкиПечатныхФорм) = Ложь ИЛИ ТипЗнч(НастройкиПечатныхФорм) <> Тип("Массив") Тогда
		НастройкиПечатныхФорм = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементПФ из НастройкиПечатныхФорм Цикл
		
		Если ЭлементПФ.Имя = "УниверсальныйПередаточныйДокументКомплект" Тогда
			
			ЭлементПФ.Копий 	= 2;
			ЭлементПФ.Печатать 	= Истина;
			Настроена 			= Истина;
			
		Иначе
			ЭлементПФ.Печатать 	= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Настроена Тогда
		НастройкиПечатныхФорм.Добавить(Новый Структура("Имя, Копий, Печатать", "УниверсальныйПередаточныйДокументКомплект", 2, Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиПечатиКомплекта();
	
	КлючНастроек 	= "Документ.РеализацияТоваровУслуг-Акт,АктНаПередачуПрав,СчетФактураКомплект,УниверсальныйПередаточныйДокументКомплект,СчетЗаказКомплект";
	КлючОбъекта 	= "НастройкиПечатныхФормКомплект";
	
	СохраняемыеНастройкиПечатныхФорм = ЗагрузитьНастройкиПечатныхФормНаСервереБК(КлючОбъекта, КлючНастроек);
	
	Если ЗначениеЗаполнено(СохраняемыеНастройкиПечатныхФорм) = Ложь Тогда
		
		СохраняемыеНастройкиПечатныхФорм = Новый Массив;
		
		СохраняемаяНастройка = Новый Структура("Имя, Копий, Печатать", "Акт", 2, Ложь);
		СохраняемыеНастройкиПечатныхФорм.Добавить(СохраняемаяНастройка);
		
		СохраняемаяНастройка = Новый Структура("Имя, Копий, Печатать", "АктНаПередачуПрав", 2, Ложь);
		СохраняемыеНастройкиПечатныхФорм.Добавить(СохраняемаяНастройка);
		
		СохраняемаяНастройка = Новый Структура("Имя, Копий, Печатать", "СчетФактураКомплект", 2, Ложь);
		СохраняемыеНастройкиПечатныхФорм.Добавить(СохраняемаяНастройка);
		
		СохраняемаяНастройка = Новый Структура("Имя, Копий, Печатать", "УниверсальныйПередаточныйДокументКомплект", 2, Ложь);
		СохраняемыеНастройкиПечатныхФорм.Добавить(СохраняемаяНастройка);
		
		СохраняемаяНастройка = Новый Структура("Имя, Копий, Печатать", "СчетЗаказКомплект", 1, Ложь);
		СохраняемыеНастройкиПечатныхФорм.Добавить(СохраняемаяНастройка);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("КлючНастроек", 	КлючНастроек);
	Результат.Вставить("КлючОбъекта", 	КлючОбъекта);
	Результат.Вставить("СохраняемыеНастройкиПечатныхФорм", СохраняемыеНастройкиПечатныхФорм);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
	
	ИмяПапкиФайлов 		= Объект.ПапкаСкриптовJS + "1CTmpImg";
	ПапкаФайлов 		= Новый Файл(ИмяПапкиФайлов);
	
	Если ПапкаФайлов.Существует() Тогда
		
		Попытка
			УдалитьФайлы(ПапкаФайлов);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКнопокПроверкиОригиналов()
	
	//Расшифровка переменной "СостояниеПроверкиДокументов":
	//	Индекс: 0, Значение: Не проверен
	//	Индекс: 1, Значение: Отказ проверки скана
	//	Индекс: 2, Значение: Скан проверен
	//	Индекс: 3, Значение: Отказ проверки оригинала
	//	Индекс: 4, Значение: Оригинал проверен
	
	Элементы.КОтклонитьОригиналы.Доступность 				= СостояниеПроверкиДокументов < 3 
																ИЛИ (РасширенныеПраваБухгалтера И СостояниеПроверкиДокументов = 4);
	Элементы.КОригиналыКорректны.Доступность 				= СостояниеПроверкиДокументов < 4;//НЕ ОригиналПроверен;
	Элементы.КОбъединитьРТУ.Доступность 					= СостояниеПроверкиДокументов = 2 ИЛИ СостояниеПроверкиДокументов = 4;//Возможно, стоит отталкиваться строго от проведения РТУ
	Элементы.ГрФормированиеДокументовЗаказчика.Доступность 	= СостояниеПроверкиДокументов = 4;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКнопокЭДО()
	
	Если СостояниеПроверкиДокументов = 4 Тогда //	Индекс: 4, Значение: Оригинал проверен

		//КВВ++ 2022.03.03
		//Было:
		//РезультатПроверкиВозможностиОтправки 						= КДВКаргоМартВызовСервера.ВозможнаОтправкаЧерезЭДО(НомерЗаказаКаргоМарт, Объект.Организация);
		//Стало:
		РезультатПроверкиВозможностиОтправки 						= КДВКаргоМартВызовСервера.ВозможнаОтправкаЧерезЭДО(НомерЗаказаКаргоМарт);
		Элементы.КнОтправитьПоЭДОДокументыДляЗаказчика.Видимость 	= РезультатПроверкиВозможностиОтправки.КодОшибки = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КСледующийСкан(Команда)
	
	Если ИндексТекущегоДокумента < ТаблицаДокументовЗаказа.Количество()-1 Тогда
		ПерейтиКДокументу(ИндексТекущегоДокумента + 1);
	КонецЕсли;
	
	//ОтобразитьРешениеПоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура КПредыдущийСкан(Команда)
	
	Если ИндексТекущегоДокумента > 0 Тогда
		ПерейтиКДокументу(ИндексТекущегоДокумента -1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагРешениеПоЗаказуПриИзменении(Элемент)
	Элементы.ПричинаОтклоненияЗаказа.Видимость = ФлагРешениеПоЗаказу = 0;
КонецПроцедуры

&НаКлиенте
Процедура КСканыПроверены(Команда)
	
	Если ИндексТекущегоДокумента < ТаблицаДокументовЗаказа.Количество() Тогда
		
		ИндексТекущегоДокумента = ТаблицаДокументовЗаказа.Количество();
		ОтобразитьРешениеПоЗаказу();
		Возврат;
		
	КонецЕсли;
	
		
	Отбор 				= Новый Структура("РезультатПроверкиКартинка", 0);
	СтрокаБезРешения 	= ТаблицаДокументовЗаказа.НайтиСтроки(Отбор);
	
	Если СтрокаБезРешения.Количество() > 0 Тогда
		
		ИндексСтрокиБезРешения = ТаблицаДокументовЗаказа.Индекс(СтрокаБезРешения[0]);
		ТаблицаДокументовЗаказаВыбор(Элементы.ТаблицаДокументовЗаказа, ИндексСтрокиБезРешения, Элементы.ТаблицаДокументовЗаказаПредставлениеДокумента, Ложь);
		ОтобразитьРешениеПоЗаказу(Ложь);
		ПоказатьПредупреждение(, "Есть еще непроверенные сканы по данному заказу.", 5, "Внимание");
		
	ИначеЕсли ФлагРешениеПоЗаказу = 0 И ПустаяСтрока(ПричинаОтклоненияЗаказа) Тогда
		
		ПоказатьПредупреждение(, "При отклонении сканов, требуется заполнение комментария перевозчику!", 5, "Внимание");
		ТекущийЭлемент = Элементы.ПричинаОтклоненияЗаказа;
		
	Иначе
		
		//Сохранение результатов проверки сканов в БД и попытка отправки этих результатов в Каргомарт.
		МассивПроверкиСканов 	= Новый Массив;
		Отбор 					= Новый Структура("НеПроверенВ_БД", Истина);
		СтрокиПроверкиСканов 	= ТаблицаДокументовЗаказа.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаПроверкиСканов из СтрокиПроверкиСканов Цикл
			МассивПроверкиСканов.Добавить(Новый Структура("ИдентификаторДокумента, ВидДокумента, ДатаДокумента, НомерДокумента, ИтогПроверки, Комментарий",
				СтрокаПроверкиСканов.ИдентификаторДокумента,
				СтрокаПроверкиСканов.ВидДокумента,
				СтрокаПроверкиСканов.ДатаДокумента,
				СтрокаПроверкиСканов.НомерДокумента,
				?(СтрокаПроверкиСканов.РезультатПроверкиКартинка = 2, "СканПроверен", "ОтказПроверкиСкана"),
				СтрокаПроверкиСканов.Комментарий));
		КонецЦикла;
		
		СтруктураРешениеПоСканамЗаказа = Новый Структура;
		//КВВ++ 2022.03.01 надо передовать ссылку
		//Было:
		//СтруктураРешениеПоСканамЗаказа.Вставить("НомерЗаказаКаргоМарт", 	НомерЗаказаКаргоМарт);
		СтруктураРешениеПоСканамЗаказа.Вставить("ЗаказКаргоМарт", 	ЗаказКаргоМарт);
		СтруктураРешениеПоСканамЗаказа.Вставить("ИтогПроверки", 			?(ФлагРешениеПоЗаказу = 1, "СканПроверен", "ОтказПроверкиСкана"));
		СтруктураРешениеПоСканамЗаказа.Вставить("Комментарий", 				ПричинаОтклоненияЗаказа);
		СтруктураРешениеПоСканамЗаказа.Вставить("ИтогПоДокументам", 		МассивПроверкиСканов);
		
		Результат = КДВКаргомартКлиент.СохранитьРезультатПроверкиДокументовПоЗаказу(Объект.Организация, СтруктураРешениеПоСканамЗаказа, ВариантОплатыПеревозки);
		
		Если Результат.КодОшибки <> 0 Тогда
			ПоказатьПредупреждение(, Результат.Описание, 10,"Ошибка сохраения результата проверки сканов документов");
		Иначе
			
			Если ЗначениеЗаполнено(Результат.Описание) Тогда
				ПоказатьПредупреждение(, Результат.Описание,, "Информация");	
			КонецЕсли;
			
			ЭтаФорма.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КСохранитьРешениеПоДокументу(Команда)
	
	Если СохранитьРешениеПоДокументу() Тогда
		НастроитьКнопкиНавигацииПоДокументам();
	КОнецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция СохранитьРешениеПоДокументу()
	
	Если ФлагРешениеПоДокументу = 0 
		И ПустаяСтрока(ПричинаОтклоненияДокумента) 
		И ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].НеПроверенВ_БД Тогда
		
		ПоказатьПредупреждение(, "При отклонении скана, требуется указание причины отклонения!", 5, "Внимание");
		ЭтаФорма.ТекущийЭлемент = Элементы.ПричинаОтклоненияДокумента;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ФлагРешениеПоДокументу > 0 Тогда
		ПричинаОтклоненияДокумента = "";
	КонецЕсли;
	
	ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].НомерДокумента 			= ТекДокументНомер;
	ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ДатаДокумента 				= ТекДокументДата;
	ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].Комментарий 				= ПричинаОтклоненияДокумента;
	ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].РезультатПроверкиКартинка 	= ФлагРешениеПоДокументу + 1;
	ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ПредставлениеДокумента 	= Строка(ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ВидДокумента) 
		+ ?(ЗначениеЗаполнено(ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].НомерДокумента), " №" + ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].НомерДокумента, "") 
		+ " от " + Формат(ТаблицаДокументовЗаказа[ИндексТекущегоДокумента].ДатаДокумента, "ДЛФ=D") + "г.";
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ТекДокументНомерПриИзменении(Элемент)
	НастроитьКнопкиНавигацииПоДокументам();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтклоненияДокументаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Элементы.КнСохранитьРешениеПоДокументу.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументЗаказа(Команда)
	
	КлючУникальностиФормы 	= "Добавление документа";
	СтруктураПараметров 	= Новый Структура;
	
	ДополнительныеПараметры = Неопределено;
	ОП 						= Новый ОписаниеОповещения("ОбработкаОповещенияОЗакрытииФормыДобавлениеДокумента", ЭтаФорма, ДополнительныеПараметры);
	
	УжеОткрытаяФорма = ПолучитьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ДобавлениеДокументаКЗаказу",СтруктураПараметров,ЭтаФорма, КлючУникальностиФормы);
	
	Если УжеОткрытаяФорма <> Неопределено И УжеОткрытаяФорма.Открыта() Тогда
		УжеОткрытаяФорма.Закрыть();
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НомерЗаказаКаргоМарт", 	НомерЗаказаКаргоМарт);
	//КВВ++ 2022.03.01 передаем новый параметр
	СтруктураПараметров.Вставить("ЗаказКаргоМарт", 	ЗаказКаргоМарт);
	СтруктураПараметров.Вставить("Организация", 			Объект.Организация);
	СтруктураПараметров.Вставить("ДокументПТУ", 			ДокументПТУ);
	
	ОткрытьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ДобавлениеДокументаКЗаказу", СтруктураПараметров, ЭтаФорма, КлючУникальностиФормы,,, ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОЗакрытииФормыДобавлениеДокумента(ПараметрЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрЗакрытия) = Тип("Структура") Тогда
		
		ДокументНеОтображается = ИндексТекущегоДокумента = ТаблицаДокументовЗаказа.Количество();
		
		//Если ПТУ не был создан ранее, и при добавлении нового скана документа его пришлось создать, то заполним его в текущей форме.
		Если ПараметрЗакрытия.Свойство("ДокументПТУ") И НЕ ЗначениеЗаполнено(ДокументПТУ) Тогда
			ДокументПТУ = ПараметрЗакрытия.ДокументПТУ;
		КонецЕсли;
		
		//Обновить список документов по заказу.
		//Форма должна возвращать данные нового документа, и эти данные просто добавим к таблице документов заказа.
		СтрокаТаб = ТаблицаДокументовЗаказа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, ПараметрЗакрытия);
		СтрокаТаб.ПредставлениеДокумента 	= Строка(ПараметрЗакрытия.ВидДокумента) + ?(ЗначениеЗаполнено(ПараметрЗакрытия.НомерДокумента), " №" + ПараметрЗакрытия.НомерДокумента, "") + " от " + Формат(ПараметрЗакрытия.ДатаДокумента, "ДЛФ=D") + "г.";
		СтрокаТаб.НеПроверенВ_БД 			= СтрокаТаб.РезультатПроверкиКартинка = 0;
		//Повторно закачаем файлы изображений на клиент.
		//В дальнейшем, было бы неплохо продумать и реализовать доставку лишь новых файлов на клиент, к уже имеющимся.
		ДоставитьФайлыИзображенийНаКлиент();	
		
		Если ДокументНеОтображается Тогда
			ИндексТекущегоДокумента = ТаблицаДокументовЗаказа.Количество();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КСкачатьТекущийСкан(Команда)
	
	Если Лев(Элементы.ГрСтраницыДляHTML.ТекущаяСтраница.Имя, 6) = "ГрСкан" Тогда
		
		ИмяСкана 				= Сред(Элементы.ГрСтраницыДляHTML.ТекущаяСтраница.Имя, 3);
		АдресФайла 				= Этаформа["АдресФайлаИзображения" + ИмяСкана];
		ФайлСкана 				= Новый Файл(СтрЗаменить(СтрЗаменить(АдресФайла,"file://", ""), "/", "\"));
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("АдресФайла", АдресФайла);
		
		Если ФайлСкана.Существует() Тогда
			
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Фильтр = НСтр("ru='Файл *" + ФайлСкана.Расширение + "|*" + ФайлСкана.Расширение + "'");
			Диалог.Заголовок = НСтр("ru='Выберите файл для сохранения'");
			ОповещениеЗавершения = Новый ОписаниеОповещения("СкачатьТекущийСканЗавершение", ЭтаФорма, ДополнительныеПараметры);
			Диалог.Показать(ОповещениеЗавершения);
			
		Иначе
			Сообщить("Файл скана не обнаружен. Попробуйте открыть окно работы с заказом повторно.");
		КонецЕсли;
		
	Иначе
		Сообщить("Ошибка определения имени изображения. Обратитесь к программисту.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьТекущийСканЗавершение(ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		
		КопироватьФайл(ДополнительныеПараметры.АдресФайла, ВыбранныйФайл[0]);
		ПоказатьЗначение(, "Файл """ + ВыбранныйФайл[0] + """ сохранен.");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КСкачатьВсеСканы(Команда)
	
	//Нужно получить список прикрепленных документов, и для каждого список файлов изображений.
	МассивСписокФайлов = ПолучитьСписокФайловИзображенийПоЗаказуНаСервереБезКонтекста(НомерЗаказаКаргоМарт, Объект.Организация);
	
	Если МассивСписокФайлов = Неопределено Тогда
		
		Сообщить("В БД не найдены изображения документов по заказу. Возмжно, заказ был изменён.");
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСписокФайлов", МассивСписокФайлов);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru='Выберите каталог для сохранения файлов'");
	ОповещениеЗавершения = Новый ОписаниеОповещения("СкачатьВсеСканыЗавершение", ЭтаФорма, ДополнительныеПараметры);
	Диалог.Показать(ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьВсеСканыЗавершение(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйКаталог) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		КаталогЗаказа = ВыбранныйКаталог[0] + "\Заказ №" + УдалитьЗапрещенныеСимволыИмениФайла(НомерЗаказаКаргоМарт);
		СоздатьКаталог(КаталогЗаказа); 
		
		ИДПД 	= ДополнительныеПараметры.МассивСписокФайлов[0].Найти("ИдентификаторПервичногоДокумента");
		ВД 		= ДополнительныеПараметры.МассивСписокФайлов[0].Найти("ВидДокумента");
		ДД 		= ДополнительныеПараметры.МассивСписокФайлов[0].Найти("ДатаДокумента");
		НД 		= ДополнительныеПараметры.МассивСписокФайлов[0].Найти("НомерДокумента");
		НС 		= ДополнительныеПараметры.МассивСписокФайлов[0].Найти("СсылкаСтрока");
		НР 		= ДополнительныеПараметры.МассивСписокФайлов[0].Найти("Расширение");
		
		Для Итр = 1 По ДополнительныеПараметры.МассивСписокФайлов.Количество()-1 Цикл
			
			ДанныеФайла = ДополнительныеПараметры.МассивСписокФайлов[Итр];
			
			КаталогТекДокумента = КаталогЗаказа + "\" + УдалитьЗапрещенныеСимволыИмениФайла(Строка(ДанныеФайла[ВД]) + " №" + ДанныеФайла[НД] + " от " + Формат(ДанныеФайла[ДД], "ДФ=yyyy-MM-dd"));
			СоздатьКаталог(КаталогТекДокумента);
			
			ИмяКопируемогоФайла = Объект.ПапкаСкриптовJS + "1CTmpImg\"	+ ДанныеФайла[НС] + "." + ДанныеФайла[НР];
			
			ИмяТекФайла 		= КаталогТекДокумента + "\" + ДанныеФайла[НС] + "." + ДанныеФайла[НР];
			
			КопироватьФайл(ИмяКопируемогоФайла, ИмяТекФайла);
			
		КонецЦикла;
		
		Сообщить("Файлы изображений сохранены по адресу: """ + КаталогЗаказа + """.");
	Исключение
		Сообщить("Произошла ошибка сохранения файла. 
			|Подробности: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	
КонецПроцедуры

Функция УдалитьЗапрещенныеСимволыИмениФайла(ИмяФайла)
	
	ЗапрещенныеСимволы = "\/:*?""<>|+";
	
	Для Итр = 1 по СтрДлина(ЗапрещенныеСимволы) Цикл
		ИмяФайла = СтрЗаменить(ИмяФайла, Сред(ЗапрещенныеСимволы,Итр,1),"");
	КонецЦикла;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ОбъединитьРТУ(Команда)

	//КВВ++ 2022.03.01 На самом деле есть еще и внешняя обработка... 
	//Сейчас закоментю блок. Унать у Попова Максима нужно ли это...
	
	////Открыть форму объединения заказов для заказчика
	//КлючУникальностиФормы 	= "Объединение заказов для заказчика";
	//СтруктураПараметров 	= Новый Структура;
	//
	//ДополнительныеПараметры = Неопределено;
	//ОП 						= Новый ОписаниеОповещения("ОбработкаОповещенияОЗакрытииФормыОбъединенияЗаказовДляЗаказчика", ЭтаФорма, ДополнительныеПараметры);
	//
	//УжеОткрытаяФорма = ПолучитьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ОбъединениеЗаказовДляЗаказчика", СтруктураПараметров, ЭтаФорма, КлючУникальностиФормы);
	//
	//Если УжеОткрытаяФорма <> Неопределено И УжеОткрытаяФорма.Открыта() Тогда
	//	УжеОткрытаяФорма.Закрыть();
	//КонецЕсли;
	//
	//СтруктураПараметров.Вставить("НомерЗаказаКаргоМарт", 	НомерЗаказаКаргоМарт);
	//СтруктураПараметров.Вставить("Организация", 			Объект.Организация);
	//
	//ОткрытьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ОбъединениеЗаказовДляЗаказчика", СтруктураПараметров, ЭтаФорма, КлючУникальностиФормы,,, ОП);

	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОЗакрытииФормыОбъединенияЗаказовДляЗаказчика(ПараметрЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрЗакрытия) = Тип("Структура") Тогда
		//Чего-нибудь сделать по завершении объединения заказов для заказчика.
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КВыделитьРТУНаСервере(НомерЗаказаКаргоМарт, Организация)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 0);
	Результат.Вставить("Лог", 	"");
	//Проверить необходимость выделения. Если не нужно, то сообщить. Если нужно, то выделить.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КДВКаргомартЗаказ.ДокументРеализацииЗаказчику КАК ДокументРеализацииЗаказчику,
	|	ВсеЗаказыВЭтомРТУ.Номер КАК НомерЗаказаКаргоМарт
	|ИЗ
	|	Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КДВКаргомартЗаказ КАК ВсеЗаказыВЭтомРТУ
	|		ПО КДВКаргомартЗаказы.ДокументРеализацииЗаказчику = ВсеЗаказыВЭтомРТУ.ДокументРеализацииЗаказчику
	|ГДЕ
	|	КДВКаргомартЗаказ.Номер = &НомерЗаказаКаргоМарт
	|	И КДВКаргомартЗаказы.Организация = &Организация
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомерЗаказаКаргоМарт)
	|ПО
	|	ДокументРеализацииЗаказчику";
	Запрос.УстановитьПараметр("НомерЗаказаКаргоМарт", НомерЗаказаКаргоМарт);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Следующий() = Ложь Тогда
		
		Результат.КодОшибки = 8;
		Результат.Лог = КДВКаргомартКлиентСервер.СообщениеПользователю(Результат.КодОшибки, НомерЗаказаКаргоМарт) 
			+ Символы.ПС;
		Возврат Результат;
		
	КонецЕсли;
	
	Если Выборка.НомерЗаказаКаргоМарт = 1 Тогда
		
		Результат.Лог = "По заказу Каргомарт №" + НомерЗаказаКаргоМарт + " создан отдельный РТУ. Разделение не требуется."
			+ Символы.ПС;
		Возврат Результат;
		
	КонецЕсли;
	
	МассивИдентификаторыКаргомарт = Новый Массив;
	МассивИдентификаторыКаргомарт.Добавить(НомерЗаказаКаргоМарт);
	
	РезультатОтменыРТУ = КДВКаргомартСервер.ОтменитьРеализациюЗаказчикуПоЗаказамКаргомарт(Организация, МассивИдентификаторыКаргомарт);
	
	Если РезультатОтменыРТУ.КодОшибки <> 0 Тогда
		Возврат РезультатОтменыРТУ;
	КонецЕсли;
	
	Результат = КДВКаргомартСервер.СоздатьРеализациюЗаказчикуПоЗаказамКаргомарт(Организация, МассивИдентификаторыКаргомарт, ТекущаяДата());
	
	Результат.Лог = РезультатОтменыРТУ.Лог + Результат.Лог;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КВыделитьРТУ(Команда)
	
	Результат = КВыделитьРТУНаСервере(НомерЗаказаКаргоМарт, Объект.Организация);
	
	ПоказатьПредупреждение(, СокрЛП(Результат.Лог),, "Информация");
	
	//Если Результат.КодОшибки <> 0 Тогда
	//	Сообщить("Код ошибки: " + Результат.КодОшибки);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквезитыТребуютИсправления(Команда)
	
	//Открыть форму отправки проблемных платежных реквизитов
	КлючУникальностиФормы 	= "ПлатежныеРеквизитыТребуютИсправления";
	СтруктураПараметров 	= Новый Структура;
	
	УжеОткрытаяФорма = ПолучитьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ПлатежныеРеквизитыТребуютИсправления", СтруктураПараметров, ЭтаФорма, КлючУникальностиФормы);
	
	Если УжеОткрытаяФорма <> Неопределено И УжеОткрытаяФорма.Открыта() Тогда
		УжеОткрытаяФорма.Закрыть();
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НомерЗаказаКаргоМарт", 	НомерЗаказаКаргоМарт);
	//КВВ++ 2022.03.01 передаем еще и ссылку на заказ
	СтруктураПараметров.Вставить("ЗаказКаргоМарт", 			ЗаказКаргоМарт);
	СтруктураПараметров.Вставить("Организация", 			Объект.Организация);
	
	ДопПараметры = Новый Структура;
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОЗакрытииФормыИсправленияПлатежныхРеквизитов", ЭтаФорма, ДопПараметры);
	
	ОткрытьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ПлатежныеРеквизитыТребуютИсправления", СтруктураПараметров, ЭтаФорма, КлючУникальностиФормы,,,ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОЗакрытииФормыИсправленияПлатежныхРеквизитов(ПараметрЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрЗакрытия = Истина Тогда
		
		ИсправлениеПлатежныхРеквизитовДоступно = Ложь;
		НастроитьВидСогласноРежимуРаботы();
		
	КонецЕсли;
	
КонецПроцедуры

//+++ 2022.03.21 Конинин В.В.
&НаСервере
Функция ВнестиИзмененияВДопСведения(ВариантОплаты)

	Перевозчик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКаргомарт, "Перевозчик");
	
	Попытка
		
		НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект 						= Перевозчик;
		НоваяЗапись.Свойство 					= КДВКаргомартПовтИсп.РеквизитВариантОплатыПеревозки();
		НоваяЗапись.Значение 					= ВариантОплаты;
		
		НоваяЗапись.Записать(Истина);
		
	Исключение
		
		Возврат Ложь;	
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

//+++ 2022.03.21 Конинин В.В.
&НаКлиенте
Процедура ОбработкаОповещенияОЗакрытииФормыФормаВыбораВариантаОплаты(ПараметрЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрЗакрытия = Неопределено Тогда
		
		Возврат
		
	КонецЕсли;
	
	Если ВнестиИзмененияВДопСведения(ВернутьВариантОплаты(ПараметрЗакрытия.ВариантОплаты).Имя) Тогда
		
		ТаблицаРеквизитыЗаказа[ПараметрЗакрытия.ВыбраннаяСтрока].Путь = 		ПараметрЗакрытия.ВариантОплаты;
		ТаблицаРеквизитыЗаказа[ПараметрЗакрытия.ВыбраннаяСтрока].Значение = 	ПараметрЗакрытия.ВариантОплаты;
		
		//+++ 2022.03.22 Конинин В.В.
		
		ВариантОплатыПеревозки = ВернутьВариантОплаты(ПараметрЗакрытия.ВариантОплаты).Имя;
		
		
	Иначе
		
		Сообщить(НСтр(" ru = ' Не удалось изменить Вариант оплаты перевозки!'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

//+++ 2022.03.21 Конинин В.В.
 &НаКлиенте
Процедура ВариантОплаты(ВариантОплаты, ВыбраннаяСтрока)
	
	КлючУникальностиФормы 	= "Вариант оплаты документа";
	СтруктураПараметров 	= Новый Структура;
	
	ДополнительныеПараметры = Неопределено;
	ОП 						= Новый ОписаниеОповещения("ОбработкаОповещенияОЗакрытииФормыФормаВыбораВариантаОплаты", ЭтаФорма, ДополнительныеПараметры);
	
	УжеОткрытаяФорма = ПолучитьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ФормаВыбораВариантаОплаты",СтруктураПараметров,ЭтаФорма, КлючУникальностиФормы);
	
	Если УжеОткрытаяФорма <> Неопределено И УжеОткрытаяФорма.Открыта() Тогда
		УжеОткрытаяФорма.Закрыть();
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВариантОплаты", 			?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты, "ОплатаПоОригиналам"));
	СтруктураПараметров.Вставить("ВыбраннаяСтрока", 		ВыбраннаяСтрока);
	
	ОткрытьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ФормаВыбораВариантаОплаты", СтруктураПараметров, ЭтаФорма, КлючУникальностиФормы,,, ОП);
	
КонецПроцедуры


//+++ 2022.03.21 Конинин В.В.
&НаКлиенте
Процедура ТаблицаРеквизитыЗаказаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТаблицаРеквизитыЗаказа[ВыбраннаяСтрока].ИмяРеквизита = "Вариант оплаты" Тогда
		Если Протокол = 1 Тогда
			ВариантОплаты(ТаблицаРеквизитыЗаказа[ВыбраннаяСтрока].Значение, ВыбраннаяСтрока);
		Иначе
			ПоказатьЗначение(,ТаблицаРеквизитыЗаказа[ВыбраннаяСтрока].Значение);
		КонецЕсли;
	ИначеЕсли ТаблицаРеквизитыЗаказа[ВыбраннаяСтрока].ИмяРеквизита = "Дата выгрузки" Тогда
		
		ДП = Новый Структура;
		ДП.Вставить("ИсходнаяДатаВыгрузки", ТаблицаРеквизитыЗаказа[ВыбраннаяСтрока].Путь);
		ДП.Вставить("СтрокаДатаВыгрузки", ВыбраннаяСтрока);
		ОП = Новый ОписаниеОповещения("ВводДатыВыгрузкиЗавершение", ЭтаФорма, ДП);
		ПоказатьВводДаты(ОП, ТаблицаРеквизитыЗаказа[ВыбраннаяСтрока].Путь, "Введите правильную дату выгрузки", ЧастиДаты.ДатаВремя);
		
	Иначе
		ПоказатьЗначение(, ТаблицаРеквизитыЗаказа[ВыбраннаяСтрока].Путь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводДатыВыгрузкиЗавершение(ВведеннаяДатаВыгрузки, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ВведеннаяДатаВыгрузки) И ДополнительныеПараметры.ИсходнаяДатаВыгрузки <> ВведеннаяДатаВыгрузки Тогда
		
		Результат = ЗаписатьДатуВыгрузкиВЗаказ(ЗаказКаргоМарт, ВведеннаяДатаВыгрузки);
		
		Если Результат = Ложь Тогда
			Сообщить("Ошибка записи заказа Каргомарт!");
		Иначе
			
			ТаблицаРеквизитыЗаказа[ДополнительныеПараметры.СтрокаДатаВыгрузки].Путь 	= ВведеннаяДатаВыгрузки;
			ТаблицаРеквизитыЗаказа[ДополнительныеПараметры.СтрокаДатаВыгрузки].Значение = ВведеннаяДатаВыгрузки;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьДатуВыгрузкиВЗаказ(ЗаказКаргоМарт, ВведеннаяДатаВыгрузки)
	
	ОбъектЗаказКаргомарт 				= ЗаказКаргоМарт.ПолучитьОбъект();
	ОбъектЗаказКаргомарт.ДатаВыгрузки 	= ВведеннаяДатаВыгрузки;
	
	Попытка
		ОбъектЗаказКаргомарт.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

//+++ 2022.03.21 Конинин В.В. Нельзя удалять документы.
&НаКлиенте
Процедура ТаблицаДокументовЗаказаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры
//--- 2022.03.21 Конинин В.В.
