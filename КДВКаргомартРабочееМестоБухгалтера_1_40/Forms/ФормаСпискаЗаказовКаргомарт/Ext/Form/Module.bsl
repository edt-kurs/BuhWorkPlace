
#Область ВспомогательныеФункцииИПроцедуры

&НаСервере
Процедура ОбновитьОтборы()
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерЗаявки", 			ОтборНомерЗаявки);
	Отбор.Вставить("ДатаПогрузки", 			ОтборДатаПогрузки);
	Отбор.Вставить("Перевозчик", 			ОтборПеревозчик);
	Отбор.Вставить("НомерДокумента", 		ОтборНомерДокумента);
	Отбор.Вставить("ТолькоНеобработанные", 	ОтборНеобработанные);
	
	РеалОбъект = РеквизитФормыВЗначение("Объект");
	ЗначениеВРеквизитФормы(РеалОбъект, "Объект");
	
	ОтобратьвДС(Отбор);
	
КонецПроцедуры

// Процедура добовляет/изменяет отбор в Динамическом списке
//
// Параметры:
//  ПолеОтбора  - Строка - Левое значение отбора (Поле)
//  ВидСравненияОтбора  - ВидСравненияКомпоновкиДанных - Например: ВидСравненияКомпоновкиДанных.Равно
//  ЗначениеОтбора  - ПроизвольноеЗначение - Правое значение отбора
//
&НаСервере
Процедура ДобавлениеОтбора (ПолеОтбора, ВидСравненияОтбора, ЗначениеОтбора)
	
	ОтборСуществует = Ложь;
	
	Если ЗаказыКаргомарт.Отбор.Элементы.Количество() > 0 Тогда
					
		Для каждого Элемент из ЗаказыКаргомарт.Отбор.Элементы Цикл
		
			Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора) И Элемент.ВидСравнения = ВидСравненияОтбора Тогда
				
				Элемент.ПравоеЗначение = ЗначениеОтбора;
				
				ОтборСуществует = Истина;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ОтборСуществует Тогда
		
		ОтборДС = ЗаказыКаргомарт.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДС.ВидСравнения = ВидСравненияОтбора;
		ОтборДС.ПравоеЗначение = ЗначениеОтбора;
		ОтборДС.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора);
		ОтборДС.Использование = Истина;	
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляет отбор в Динамическом списке
//
// Параметры:
//  ПолеОтбора  - Строка - Левое значение отбора (Поле)
//  ВидСравненияОтбора  - ВидСравненияКомпоновкиДанных - Например: ВидСравненияКомпоновкиДанных.Равно
//
&НаСервере
Процедура УдалениеОтбора (ПолеОтбора, ВидСравненияОтбора)
	
	Если ЗаказыКаргомарт.Отбор.Элементы.Количество() > 0 Тогда
					
		Для каждого Элемент из ЗаказыКаргомарт.Отбор.Элементы Цикл
		
			Если (Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора) И Элемент.ВидСравнения = ВидСравненияОтбора) Тогда
				
				ЗаказыКаргомарт.Отбор.Элементы.Удалить(Элемент);	
				
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		ЗаказыКаргомарт.Отбор.Элементы.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура Устанавливает (применяет) отбор в Динамическом списке
//
// Параметры:
//  Отбор  - Структура:
//		* НомерЗаявки - Строка - Если значение заполнено добавляет поиск по полю номеру документа
//		* ДатаПогрузки - Дата - Если значение заполнено добавляет поиск по полю дата погрузки
//		* Перевозчик - СпарвочникСсылка.Контрагенты - Если значение заполнено добавляет поиск по полю Перевозчик
//		* НомерДокумента - Строка - Если значение заполнено добавляет поиск по полю дата погрузки
//		* ТолькоНеобработанные - Булево - Если значение заполнено добавляет поиск по полю СтатусПроверкиДокументов < 2
&НаСервере
Процедура ОтобратьвДС(Отбор)

		Если ЗначениеЗаполнено(Отбор) И ТипЗнч(Отбор) = Тип("Структура") Тогда

			Если Отбор.Свойство("НомерЗаявки") И ЗначениеЗаполнено(Отбор.НомерЗаявки) Тогда
				
				ДобавлениеОтбора("НомерЗаказаКаргомарт", ВидСравненияКомпоновкиДанных.Равно, Отбор.НомерЗаявки);
								
			ИначеЕсли Отбор.Свойство("НомерЗаявки") И Не ЗначениеЗаполнено(Отбор.НомерЗаявки) Тогда
				
				УдалениеОтбора("НомерЗаказаКаргомарт", ВидСравненияКомпоновкиДанных.Равно);
					
			КонецЕсли;
			
			Если Отбор.Свойство("ДатаПогрузки") И ЗначениеЗаполнено(Отбор.ДатаПогрузки) Тогда
				
				ДобавлениеОтбора("ДатаПогрузки", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоДня(Отбор.ДатаПогрузки));
				ДобавлениеОтбора("ДатаПогрузки", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(Отбор.ДатаПогрузки));
												
			ИначеЕсли Отбор.Свойство("ДатаПогрузки") И Не ЗначениеЗаполнено(Отбор.ДатаПогрузки) Тогда
				
				УдалениеОтбора("ДатаПогрузки", ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
				УдалениеОтбора("ДатаПогрузки", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
				
			КонецЕсли;
			
			Если Отбор.Свойство("Перевозчик") И ЗначениеЗаполнено(Отбор.Перевозчик) Тогда

				ДобавлениеОтбора("Перевозчик", ВидСравненияКомпоновкиДанных.Равно, Отбор.Перевозчик);
								
			ИначеЕсли Отбор.Свойство("Перевозчик") И Не ЗначениеЗаполнено(Отбор.Перевозчик) Тогда
				
				УдалениеОтбора("Перевозчик", ВидСравненияКомпоновкиДанных.Равно);
				
			КонецЕсли;
			
			Если Отбор.Свойство("НомерДокумента") И ЗначениеЗаполнено(Отбор.НомерДокумента) Тогда
								
				НайденыеЗаказы = ПоискПоДокументам(Отбор.НомерДокумента, Объект.Организация, ?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'),
													?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), '21000101'), ?(Протокол = 2, 2, 1));
													
				//Если Неопределено то документы не найдены									
				Если НайденыеЗаказы <> Неопределено Тогда
					
					ДобавлениеОтбора ("НомерЗаказаКаргомарт", ВидСравненияКомпоновкиДанных.ВСписке, НайденыеЗаказы);

				//+++ 2022.03.17 Конинин В.В.
					
				Иначе
					
					ДобавлениеОтбора ("НомерЗаказаКаргомарт", ВидСравненияКомпоновкиДанных.ВСписке, "000000"); // для вывода пустого ДС
					
				//--- 2022.03.17 Конинин В.В.
					
				КонецЕсли;
		
			ИначеЕсли Отбор.Свойство("НомерДокумента") И Не ЗначениеЗаполнено(Отбор.НомерДокумента) Тогда
				
				УдалениеОтбора("НомерЗаказаКаргомарт", ВидСравненияКомпоновкиДанных.ВСписке);
					
			КонецЕсли;
			
			Если Отбор.Свойство("ТолькоНеобработанные") И Отбор.ТолькоНеобработанные = Истина Тогда
								
				ДобавлениеОтбора("СтатусПроверкиДокументов", ВидСравненияКомпоновкиДанных.Меньше, 2);
								
			ИначеЕсли Отбор.Свойство("ТолькоНеобработанные") И Отбор.ТолькоНеобработанные = Ложь Тогда
				
				УдалениеОтбора("СтатусПроверкиДокументов", ВидСравненияКомпоновкиДанных.Меньше);
				
			КонецЕсли;
	
		КонецЕсли;

	КонецПроцедуры
	
&НаСервере
Функция ТекстЗапросаПроверкаОригиналов()
	
	Текст = "ВЫБРАТЬ
	        |	КДВКаргомартЗаказ.Номер КАК НомерЗаказаКаргомарт,
	        |	КДВКаргомартЗаказ.Организация КАК Организация,
	        |	КДВКаргомартЗаказ.МаршрутПредставление КАК Маршрут,
	        |	КДВКаргомартЗаказ.ДатаПогрузки КАК ДатаПогрузки,
	        |	КДВКаргомартЗаказ.ДатаВыгрузки КАК ДатаВыгрузки,
	        |	КДВКаргомартЗаказ.Перевозчик КАК Перевозчик,
	        |	КДВКаргомартЗаказ.Заказчик КАК Заказчик,
	        |	КДВКаргомартЗаказ.ПеревозчикСуммаБезНДС + КДВКаргомартЗаказ.ПеревозчикСуммаНДС КАК КОплате,
	        |	КДВКаргомартЗаказ.ЗаказчикСуммаБезНДС + КДВКаргомартЗаказ.ЗаказчикСуммаНДС КАК Выручка,
	        |	КДВКаргомартЗаказ.ТрекНомер КАК ТрекНомер,
	        |	КОЛИЧЕСТВО(КДВКаргомартПроверкаДокументовПоЗаказу.ВидДокумента) КАК ВидДокумента,
	        |	КОЛИЧЕСТВО(КДВКаргомартПроверкаДокументовПоЗаказу.НомерДокумента) КАК НомерДокумента,
	        |	КОЛИЧЕСТВО(КДВКаргомартПроверкаДокументовПоЗаказу.ДатаДокумента) КАК ДатаДокумента,
	        |	МАКСИМУМ(КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.ДатаНачала) КАК ПланДатаПлатежа,
	        |	МАКСИМУМ(ВЫБОР
	        |			КОГДА ЕСТЬNULL(КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.СтатусЗаявки, """") = ЗНАЧЕНИЕ(Перечисление.КДВ_СостоянияИсполненияЗаявки.Исполнена)
	        |				ТОГДА КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.ПлатежноеПоручение.Дата
	        |			ИНАЧЕ NULL
	        |		КОНЕЦ) КАК ФактДатаПлатежа,
	        |	КДВКаргомартЗаказ.Ссылка КАК ЗаказКаргомарт,
	        |	ВЫБОР
	        |		КОГДА ЕСТЬNULL(КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.СтатусЗаявки, """") = ЗНАЧЕНИЕ(Перечисление.КДВ_СостоянияИсполненияЗаявки.Исполнена)
	        |			ТОГДА ""Оплачено "" + СТРОКА(КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.ПлатежноеПоручение.Дата)
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА НЕ КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.ДатаНачала ЕСТЬ NULL
	        |					ТОГДА ""В плане "" + СТРОКА(КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.ДатаНачала)
	        |				ИНАЧЕ ""Нет""
	        |			КОНЕЦ
	        |	КОНЕЦ КАК СостояниеОплаты,
	        |	ВЫБОР
	        |		КОГДА НЕ(ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОтказПроверкиОригинала)
	        |					ИЛИ ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОригиналПроверен))
	        |			ТОГДА ВЫБОР
	        |					КОГДА КДВКаргомартЗаказ.Контроллер = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	        |						ТОГДА 0
	        |					ИНАЧЕ 1
	        |				КОНЕЦ
	        |		КОГДА ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОтказПроверкиОригинала)
	        |			ТОГДА 2
	        |		ИНАЧЕ 3
	        |	КОНЕЦ КАК СтатусПроверкиДокументов,
	        |	ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) КАК РезультаПроверки,
	        |	КДВКаргомартПроверкаЗаказовСрезПоследних.Контроллер КАК Контроллер,
	        |	КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки КАК РезультатПроверки
	        |ИЗ
	        |	РегистрСведений.КДВКаргомартПроверкаЗаказов.СрезПоследних КАК КДВКаргомартПроверкаЗаказовСрезПоследних
	        |		ПРАВОЕ СОЕДИНЕНИЕ Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	        |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДВКаргомартПроверкаДокументовПоЗаказу КАК КДВКаргомартПроверкаДокументовПоЗаказу
	        |			ПО КДВКаргомартЗаказ.Ссылка = КДВКаргомартПроверкаДокументовПоЗаказу.ЗаказКаргомарт
	        |				И (КДВКаргомартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.СканПроверен))
	        |		ПО (КДВКаргомартЗаказ.Ссылка = КДВКаргомартПроверкаЗаказовСрезПоследних.ЗаказКаргомарт)
	        |ГДЕ
	        |	КДВКаргомартЗаказ.Организация = &Организация
	        |	И КДВКаргомартЗаказ.ДатаПогрузки >= &ДатаНач
	        |	И КДВКаргомартЗаказ.ДатаПогрузки <= &ДатаКон
	        |	И КДВКаргомартЗаказ.Протокол = &ОтборПоПротоколу
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	КДВКаргомартЗаказ.Номер,
	        |	КДВКаргомартЗаказ.Организация,
	        |	КДВКаргомартЗаказ.МаршрутПредставление,
	        |	КДВКаргомартЗаказ.ДатаПогрузки,
	        |	КДВКаргомартЗаказ.ДатаВыгрузки,
	        |	КДВКаргомартЗаказ.Перевозчик,
	        |	КДВКаргомартЗаказ.Заказчик,
	        |	КДВКаргомартЗаказ.Ссылка,
	        |	КДВКаргомартЗаказ.ТрекНомер,
	        |	КДВКаргомартЗаказ.ЗаказчикСуммаБезНДС + КДВКаргомартЗаказ.ЗаказчикСуммаНДС,
	        |	КДВКаргомартЗаказ.ПеревозчикСуммаБезНДС + КДВКаргомартЗаказ.ПеревозчикСуммаНДС,
	        |	ВЫБОР
	        |		КОГДА ЕСТЬNULL(КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.СтатусЗаявки, """") = ЗНАЧЕНИЕ(Перечисление.КДВ_СостоянияИсполненияЗаявки.Исполнена)
	        |			ТОГДА ""Оплачено "" + СТРОКА(КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.ПлатежноеПоручение.Дата)
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА НЕ КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.ДатаНачала ЕСТЬ NULL
	        |					ТОГДА ""В плане "" + СТРОКА(КДВКаргомартЗаказ.ДокументЗРДСОплатаПеревозчику.ДатаНачала)
	        |				ИНАЧЕ ""Нет""
	        |			КОНЕЦ
	        |	КОНЕЦ,
	        |	ВЫБОР
	        |		КОГДА НЕ(ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОтказПроверкиОригинала)
	        |					ИЛИ ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОригиналПроверен))
	        |			ТОГДА ВЫБОР
	        |					КОГДА КДВКаргомартЗаказ.Контроллер = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	        |						ТОГДА 0
	        |					ИНАЧЕ 1
	        |				КОНЕЦ
	        |		КОГДА ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОтказПроверкиОригинала)
	        |			ТОГДА 2
	        |		ИНАЧЕ 3
	        |	КОНЕЦ,
	        |	КДВКаргомартПроверкаЗаказовСрезПоследних.Контроллер,
	        |	КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки";
		
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ЗапросПроверкаСканов()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КДВКаргомартЗаказ.Номер КАК НомерЗаказаКаргомарт,
	               |	КДВКаргомартЗаказ.Организация КАК Организация,
	               |	КДВКаргомартЗаказ.МаршрутПредставление КАК Маршрут,
	               |	КДВКаргомартЗаказ.ДатаПогрузки КАК ДатаПогрузки,
	               |	КДВКаргомартЗаказ.ДатаВыгрузки КАК ДатаВыгрузки,
	               |	КДВКаргомартЗаказ.Перевозчик КАК Перевозчик,
	               |	КДВКаргомартЗаказ.Заказчик КАК Заказчик,
	               |	ВложенныйЗапрос.КОплате КАК КОплате,
	               |	ВложенныйЗапрос.Выручка КАК Выручка,
	               |	ВложенныйЗапрос.СтатусПроверкиДокументов КАК СтатусПроверкиДокументов,
	               |	ВложенныйЗапрос.РезультатПроверки КАК РезультатПроверки,
	               |	ВложенныйЗапрос.ПоследнийОператор КАК ПоследнийОператор,
	               |	ВложенныйЗапрос.КомментарийПроверки КАК КомментарийПроверки,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ДатаДокументаДляПроверки) КАК ДатаДокументаДляПроверки,
	               |	ВложенныйЗапрос.ПланДатаПлатежа КАК ПланДатаПлатежа,
	               |	ВложенныйЗапрос.ФактДатаПлатежа КАК ФактДатаПлатежа,
	               |	КДВКаргомартЗаказ.Ссылка КАК ЗаказКаргомарт
	               |ИЗ
	               |	Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			КДВКаргомартЗаказ.ПеревозчикСуммаБезНДС + КДВКаргомартЗаказ.ПеревозчикСуммаНДС КАК КОплате,
	               |			КДВКаргомартЗаказ.ЗаказчикСуммаБезНДС + КДВКаргомартЗаказ.ЗаказчикСуммаНДС КАК Выручка,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)
	               |						ТОГДА ВЫБОР
	               |								КОГДА КДВКаргомартЗаказ.Контроллер = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |									ТОГДА 0
	               |								ИНАЧЕ 1
	               |							КОНЕЦ
	               |					КОГДА ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОтказПроверкиСкана)
	               |						ТОГДА 2
	               |					ИНАЧЕ 3
	               |				КОНЕЦ) КАК СтатусПроверкиДокументов,
	               |			МИНИМУМ(ЕСТЬNULL(КДВКаргомартПроверкаЗаказовСрезПоследних.РезультатПроверки, ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен))) КАК РезультатПроверки,
	               |			МАКСИМУМ(КДВКаргомартПроверкаЗаказовСрезПоследних.Контроллер) КАК ПоследнийОператор,
	               |			МАКСИМУМ(КДВКаргомартПроверкаЗаказовСрезПоследних.Комментарий) КАК КомментарийПроверки,
	               |			МАКСИМУМ(КДВКаргомартПроверкаДокументовПоЗаказу.ДатаПроверки) КАК ДатаДокументаДляПроверки,
	               |			МАКСИМУМ(ЗаявкаНаРасходованиеДенежныхСредств.ДатаНачала) КАК ПланДатаПлатежа,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА ЗаявкаНаРасходованиеДенежныхСредств.СтатусЗаявки = ЗНАЧЕНИЕ(Перечисление.КДВ_СостоянияИсполненияЗаявки.Исполнена)
	               |						ТОГДА ЗаявкаНаРасходованиеДенежныхСредств.ПлатежноеПоручение.Дата
	               |					ИНАЧЕ NULL
	               |				КОНЕЦ) КАК ФактДатаПлатежа,
	               |			КДВКаргомартЗаказ.Ссылка КАК ЗаказКаргомарт
	               |		ИЗ
	               |			Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДВКаргомартПроверкаЗаказов.СрезПоследних КАК КДВКаргомартПроверкаЗаказовСрезПоследних
	               |				ПО КДВКаргомартЗаказ.Ссылка = КДВКаргомартПроверкаЗаказовСрезПоследних.ЗаказКаргомарт
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КДВКаргомартПроверкаДокументовПоЗаказу КАК КДВКаргомартПроверкаДокументовПоЗаказу
	               |				ПО КДВКаргомартЗаказ.Ссылка = КДВКаргомартПроверкаДокументовПоЗаказу.ЗаказКаргомарт
	               |					И (КДВКаргомартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.НеПроверен))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	               |				ПО КДВКаргомартЗаказ.ДокументПоступленияОтПеревозчика = ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование
	               |					И (ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления = ЛОЖЬ)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			КДВКаргомартЗаказ.ПеревозчикСуммаБезНДС + КДВКаргомартЗаказ.ПеревозчикСуммаНДС,
	               |			КДВКаргомартЗаказ.ЗаказчикСуммаБезНДС + КДВКаргомартЗаказ.ЗаказчикСуммаНДС,
	               |			КДВКаргомартЗаказ.Ссылка) КАК ВложенныйЗапрос
	               |		ПО КДВКаргомартЗаказ.Ссылка = ВложенныйЗапрос.ЗаказКаргомарт
	               |ГДЕ
	               |	КДВКаргомартЗаказ.Организация = &Организация
	               |	И КДВКаргомартЗаказ.ДатаПогрузки >= &ДатаНач
	               |	И КДВКаргомартЗаказ.ДатаПогрузки <= &ДатаКон
	               |	И КДВКаргомартЗаказ.Протокол = &ОтборПоПротоколу
	               |	И ЕСТЬNULL(ВложенныйЗапрос.ДатаДокументаДляПроверки, 0) <> 0
	               |	И НЕ ВложенныйЗапрос.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.ОригиналПроверен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КДВКаргомартЗаказ.МаршрутПредставление,
	               |	КДВКаргомартЗаказ.Перевозчик,
	               |	КДВКаргомартЗаказ.Заказчик,
	               |	КДВКаргомартЗаказ.ДатаВыгрузки,
	               |	КДВКаргомартЗаказ.Номер,
	               |	КДВКаргомартЗаказ.Организация,
	               |	КДВКаргомартЗаказ.ДатаПогрузки,
	               |	КДВКаргомартЗаказ.Ссылка,
	               |	ВложенныйЗапрос.КОплате,
	               |	ВложенныйЗапрос.Выручка,
	               |	ВложенныйЗапрос.СтатусПроверкиДокументов,
	               |	ВложенныйЗапрос.РезультатПроверки,
	               |	ВложенныйЗапрос.ПоследнийОператор,
	               |	ВложенныйЗапрос.КомментарийПроверки,
	               |	ВложенныйЗапрос.ПланДатаПлатежа,
	               |	ВложенныйЗапрос.ФактДатаПлатежа";

	Возврат ТекстЗапроса;
	
КонецФункции

//+++ 2022.03.16 Конинин В.В.
// Функция ищет документы в заказе каргомарт в поле запроса 
//КДВКаргомартПроверкаДокументовПоЗаказу.НомерДокумента по шаблону ""%"" + &НомерДокумента + ""%""
//
// Параметры:
//  НомерДокумента - Строка - Искомый номер документа
//  ДатаНач - Дата - Дата начала отбора КДВКаргомартЗаказ
//  ДатаКон - Дата - Дата конца отбора КДВКаргомартЗаказ
//  Протокол - Число - Номер протокола обмена с Каргомарт
//
// Возвращаемое значение:
//  Результат - Массив - Массив ссылок документа КДВКаргомартЗаказ
//
&НаСервере
Функция ПоискПоДокументам(НомерДокумента, Организация, ДатаНач, ДатаКон, Протокол)

	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КДВКаргомартПроверкаДокументовПоЗаказу.НомерДокумента КАК НомерДокумента,
	               |	КДВКаргомартЗаказ.Номер КАК НомерЗаказа
	               |ИЗ
	               |	РегистрСведений.КДВКаргомартПроверкаЗаказов.СрезПоследних КАК КДВКаргомартПроверкаЗаказовСрезПоследних
	               |		ПРАВОЕ СОЕДИНЕНИЕ Документ.КДВКаргомартЗаказ КАК КДВКаргомартЗаказ
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КДВКаргомартПроверкаДокументовПоЗаказу КАК КДВКаргомартПроверкаДокументовПоЗаказу
	               |			ПО КДВКаргомартЗаказ.Ссылка = КДВКаргомартПроверкаДокументовПоЗаказу.ЗаказКаргомарт
	               |				И (КДВКаргомартПроверкаДокументовПоЗаказу.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.КДВКаргомартРезультатПроверкиДокументов.СканПроверен))
	               |		ПО (КДВКаргомартЗаказ.Ссылка = КДВКаргомартПроверкаЗаказовСрезПоследних.ЗаказКаргомарт)
	               |ГДЕ
	               |	КДВКаргомартЗаказ.Организация = &Организация
	               |	И КДВКаргомартЗаказ.ДатаПогрузки >= &ДатаНач
	               |	И КДВКаргомартЗаказ.ДатаПогрузки <= &ДатаКон
	               |	И КДВКаргомартЗаказ.Протокол = &ОтборПоПротоколу
	               |	И КДВКаргомартПроверкаДокументовПоЗаказу.НомерДокумента ПОДОБНО ""%"" + &НомерДокумента + ""%""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КДВКаргомартПроверкаДокументовПоЗаказу.НомерДокумента,
	               |	КДВКаргомартЗаказ.Номер";
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ДатаНач", 			ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 			ДатаКон);
	Запрос.УстановитьПараметр("ОтборПоПротоколу", 	Протокол);
	Запрос.УстановитьПараметр("НомерДокумента", 	НомерДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Добавить(Выборка.НомерЗаказа);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОпределитьПериодОтбора()
	
	Период.ДатаНачала = ТекущаяДата() - 60*60*24*14;//минус две недели
	Период.ДатаОкончания = ТекущаяДата();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВнешнийВидФормы(РежимРаботы)
	
	Элементы.ГрОтборыПроверкиОригиналов.Видимость 		= (РежимРаботы = 1);
//	Элементы.ЗаказыКаргомартНомераДокументов.Видимость 	= (РежимРаботы = 1);
//	Элементы.ЗаказыКаргоМартТрекНомер.Видимость 		= (РежимРаботы = 1 И Протокол = 2);
	Элементы.ОтборНеобработанные.Видимость 				= (РежимРаботы = 1);
//	Элементы.ЗаказыКаргоМартСостояниеОплаты.Видимость 	= (РежимРаботы = 1 И Протокол = 2); 
		
КонецПроцедуры

&НаСервере
Функция ПолучитьХранилищеСМодулямиJS()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	МакетыJS = Новый Структура;
	МакетыJS.Вставить("pdf_min_js", Обработка.ПолучитьМакет("pdf_min_js"));
	МакетыJS.Вставить("pdf_worker_min_js", Обработка.ПолучитьМакет("pdf_worker_min_js"));
	
	АдресХранилища = ПоместитьВоВременноеХранилище(МакетыJS, "");//Одноразовое хранилище 
	
	Возврат АдресХранилища;
	
КонецФункции

////////////////////////////////////////////////

&НаКлиенте
Процедура ОбновлениеТаблицыЗаказов()
	
	//Не будем мешать вводить данные в поля поиска.
	Если ЭтаФорма.ТекущийЭлемент = Элементы.ОтборНомерЗаявки
		ИЛИ ЭтаФорма.ТекущийЭлемент = Элементы.ОтборДатаПогрузки 
		ИЛИ ЭтаФорма.ТекущийЭлемент = Элементы.ОтборНомерДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимРаботы = 0 Тогда
		
		ЗаполнитьТаблицуЗаказовПроверкаСкановНаСервере();
		
	ИначеЕсли РежимРаботы = 1 Тогда
		
		ЗаполнитьТаблицуЗаказовПроверкаОригиналовНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //ВспомогательныеФункцииИПроцедуры

#Область Комманды

&НаКлиенте
Процедура ЗаполнитьТаблицуЗаказов(Команда)
	
	Если 		РежимРаботы = 0 Тогда
		ЗаполнитьТаблицуЗаказовПроверкаСкановНаСервере();
	ИначеЕсли 	РежимРаботы = 1 Тогда
		ЗаполнитьТаблицуЗаказовПроверкаОригиналовНаСервере();
	Иначе
		Сообщить("Неверный режим работы (" + РежимРаботы + ")!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЗаказДляПроверкиОригиналов(Команда)
	
	ОбновитьОтборы();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРТУЗаказаДС(Команда)
		
	Если Элементы.ЗаказыКаргоМартДС.ТекущиеДанные <> Неопределено Тогда	
		
		Если ЗначениеЗаполнено(Элементы.ЗаказыКаргоМартДС.ТекущиеДанные.ЗаказКаргомарт) Тогда
			
			ДокРТУ = КДВКаргомартВызовСервера.ПолучитьРТУПоЗаказуКаргоМарт(Элементы.ЗаказыКаргоМартДС.ТекущиеДанные.ЗаказКаргомарт);
			
			Если ЗначениеЗаполнено(ДокРТУ) Тогда
				ПоказатьЗначение(, ДокРТУ);
			Иначе
				Сообщить("Не найден документ РТУ для текущего заказа Каргомарт!");
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПТУЗаказаДС(Команда)
	
	Если Элементы.ЗаказыКаргоМартДС.ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Элементы.ЗаказыКаргоМартДС.ТекущиеДанные.ЗаказКаргомарт) Тогда
			
			ДокПТУ = КДВКаргомартВызовСервера.ПолучитьПТУПоЗаказуКаргоМарт(Элементы.ЗаказыКаргоМартДС.ТекущиеДанные.ЗаказКаргомарт);
			
			Если ЗначениеЗаполнено(ДокПТУ) Тогда
				ПоказатьЗначение(, ДокПТУ);
			Иначе
				Сообщить("Не найден документ ПТУ для текущего заказа Каргомарт!");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти //Комманды

#Область СобытияЭлементов

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	//ОпределитьПериодОтбора();
	
	//При открытии раб. места, установим период на последние полгода. 
	Период.ДатаНачала 		= НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -6));
	Период.ДатаОкончания 	= ТекущаяДата();
	
	//По-умолчанию только необработанные.
	ОтборНеобработанные 	= Истина;
	
	ЭтаФорма.АвтоЗаголовок 	= Ложь;
	
	Протокол = ?(Параметры.Протокол = 1, 1, 2);
	
	Если Параметры.РежимРаботы = 0 Тогда//Режим проверки сканов
		ЭтаФорма.Заголовок = "РМ бухгалтера Каргомарт: Проверка сканов";
	ИначеЕсли Параметры.РежимРаботы = 1 Тогда//Режим проверки оригиналов
		ЭтаФорма.Заголовок = "РМ бухгалтера Каргомарт: Проверка оригиналов";
	Иначе
		
		Сообщить("Ошибка: неверно указан режим работы.");
		Отказ = Истина;
		
	КонецЕсли;
	ЭтаФорма.Заголовок 	= ЭТаФорма.Заголовок + ?(Протокол = 1, "(протокол v.1)", "");
	
	РежимРаботы 		= Параметры.РежимРаботы;
	НастроитьВнешнийВидФормы(РежимРаботы);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоляОтбораПриИзменении(Элемент)
	
	Если 	ЗначениеЗаполнено(ОтборНомерЗаявки) 
		ИЛИ ЗначениеЗаполнено(ОтборДатаПогрузки) 
		ИЛИ ЗначениеЗаполнено(ОтборНомерДокумента)
		ИЛИ ЗначениеЗаполнено(ОтборПеревозчик) Тогда
		Элементы.НайтиЗаказДляПроверкиОригиналов.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.НайтиЗаказДляПроверкиОригиналов.КнопкаПоУмолчанию = Ложь;
	КонецЕсли;
	
	//Обновить отборы
	
	ОбновитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновлениеТаблицыЗаказов(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеобработанныеПриИзменении(Элемент)
	
	ОбновлениеТаблицыЗаказов();

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКаргоМартДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	
	КлючУникальностиФормы = ?(РежимРаботы = 0, "Проверка сканов", "Проверка оригиналов");
	СтруктураПараметров 	= Новый Структура;
	
	ДополнительныеПараметры = Неопределено;
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОЗакрытииФормыОбработкиЗаказа", ЭтаФорма, ДополнительныеПараметры);
	
	УжеОткрытаяФорма = ПолучитьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ФормаОбработкиЗаказаКаргомарт",СтруктураПараметров,ЭтаФорма, КлючУникальностиФормы);
	
	Если УжеОткрытаяФорма <> Неопределено И УжеОткрытаяФорма.Открыта() Тогда
		УжеОткрытаяФорма.Закрыть();
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НомерЗаказаКаргомарт", 	Элемент.ТекущиеДанные.НомерЗаказаКаргомарт);
	СтруктураПараметров.Вставить("Организация", 			Объект.Организация);
	СтруктураПараметров.Вставить("РежимРаботы", 			РежимРаботы);
	СтруктураПараметров.Вставить("Протокол", 				Протокол);
	СтруктураПараметров.Вставить("ПапкаСкриптовJS", 		Объект.ПапкаСкриптовJS);
	
	ОткрытьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ФормаОбработкиЗаказаКаргомарт", СтруктураПараметров, ЭтаФорма, КлючУникальностиФормы,,, ОП);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РежимРаботы = 0 Тогда
		
		ЗаполнитьТаблицуЗаказовПроверкаСкановНаСервере();
		
	ИначеЕсли РежимРаботы = 1 Тогда
		
		ЗаполнитьТаблицуЗаказовПроверкаОригиналовНаСервере();
		
	КонецЕсли;
	
	Объект.ПапкаСкриптовJS 	= КаталогВременныхФайлов();
	АдресХранилища 			= ПолучитьХранилищеСМодулямиJS();
	ФайлыМодулейJS 			= ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ВремФайл 		= Новый Файл(Объект.ПапкаСкриптовJS + "pdf.min.js");
	
	Если ВремФайл.Существует() = Ложь Тогда
		ФайлыМодулейJS.pdf_min_js.Записать(Объект.ПапкаСкриптовJS + "pdf.min.js");
	КонецЕсли;
	
	ВремФайл 		= Новый Файл(Объект.ПапкаСкриптовJS + "pdf.worker.min.js");
	
	Если ВремФайл.Существует() = Ложь Тогда
		ФайлыМодулейJS.pdf_worker_min_js.Записать(Объект.ПапкаСкриптовJS + "pdf.worker.min.js");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Попытка
		УдалитьФайлы(Объект.ПапкаСкриптовJS, "*.js");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти //СобытияЭлементов

#Область Оповищения

&НаКлиенте
Процедура ДкОповещенияНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	//ПараметрыОткрытия
	ОткрытьФорму("ВнешняяОбработка.КДВКаргомартРабочееМестоБухгалтера.Форма.ОбработкаОповещений", ПараметрыОткрытия, ЭтаФорма, "КлючУникальностиФормы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДкОповещенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДкОповещенияНажатие(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОЗакрытииФормыОбработкиЗаказа(ПараметрЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если 		РежимРаботы = 0 Тогда
		ЗаполнитьТаблицуЗаказовПроверкаСкановНаСервере();
	ИначеЕсли 	РежимРаботы = 1 Тогда
		ЗаполнитьТаблицуЗаказовПроверкаОригиналовНаСервере();
	Иначе
		Сообщить("Неверный режим работы (" + РежимРаботы + ")!");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти //Оповищения

 &НаСервере
Процедура ЗаполнитьТаблицуЗаказовПроверкаСкановНаСервере()
	РеалОбъект = РеквизитФормыВЗначение("Объект");
	ЗначениеВРеквизитФормы(РеалОбъект, "Объект");
					
	ЗаказыКаргомарт.ТекстЗапроса = "";
	
	ЗаказыКаргомарт.ТекстЗапроса = ЗапросПроверкаСканов();
		
	ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("Организация", 		Объект.Организация);
	ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ДатаНач", 			?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'));
	ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ДатаКон", 			?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), '21000101'));
	ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ОтборПоПротоколу", 	?(Протокол = 2, 2, 1));
	
	ОбновитьОтборы();
	
	Оповещения = КДВКаргомартСервер.ПолучитьОповещения(ПараметрыСеанса.ТекущийПользователь);
	
	Если Оповещения.Количество() > 0 Тогда
		
		Элементы.ДкОповещения.Видимость = Истина;
		Элементы.ДкОповещения.Заголовок = "Есть необработанные оповещения (" + Оповещения.Количество() + " шт.)";
		
	Иначе
		
		Элементы.ДкОповещения.Видимость = Ложь;
		Элементы.ДкОповещения.Заголовок = "";
		
	КонецЕсли; 
	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗаказовПроверкаОригиналовНаСервере()
	
	РеалОбъект = РеквизитФормыВЗначение("Объект");
	ЗначениеВРеквизитФормы(РеалОбъект, "Объект");
	
	ЗаказыКаргомарт.ТекстЗапроса = "";
	
	ЗаказыКаргомарт.ТекстЗапроса = ТекстЗапросаПроверкаОригиналов();
	
	ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("Организация", 	Объект.Организация);
	ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ДатаНач", 		?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'));
	ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ДатаКон", 		?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), '21000101'));
	ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ОтборПоПротоколу", ?(Протокол = 2, 2, 1));
	
	ОбновитьОтборы();
	
	Оповещения = КДВКаргомартСервер.ПолучитьОповещения(ПараметрыСеанса.ТекущийПользователь);
	
	Если Оповещения.Количество() > 0 Тогда
		
		Элементы.ДкОповещения.Видимость = Истина;
		Элементы.ДкОповещения.Заголовок = "Есть необработанные оповещения (" + Оповещения.Количество() + " шт.)";
		
	Иначе
		
		Элементы.ДкОповещения.Видимость = Ложь;
		Элементы.ДкОповещения.Заголовок = "";
		
	КонецЕсли; 
		
КонецПроцедуры  


